{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog.html">
<link rel="import" href="/dist/neon-animation/animations/scale-up-animation.html">
<link rel="import" href="/dist/neon-animation/animations/fade-out-animation.html">

<dom-module id="rf-keyboard-shortcuts">
    <style>
#shortcut-help-dialog ul {
    padding: 0;
}

#shortcut-help-dialog li {
    padding: 8px;
    list-style: none;
}
#shortcut-help-dialog h4 {
    margin: 0;
    margin-top: 1em;
}
#shortcut-help-dialog .key {
    padding: 0.3em;
    background-color: #eee;
    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);
    border-radius: 3px;
}

    </style>
    <template>
        <paper-dialog id="shortcut-help-dialog" entry-animation="scale-up-animation" exit-animation="fade-out-animation" modal>
            <h2>Keyboard shortcuts</h2>

            <div class="layout horizontal wrap">
                <template is="dom-repeat" items="[[ shortcutCategories ]]" as="category">
                    <ul>
                        <li><h4>[[ category.description ]]</h4></li>
                        <template is="dom-repeat" items="[[ category.shortcuts ]]" as="shortcut">
                            <li>
                                <span class="key">[[ shortcut.label ]]</span>
                                <span>[[ shortcut.description ]]</span>
                            </li>
                        </template>
                    </ul>
                </template>
            </div>

            <div class="buttons">
                <paper-button dialog-dismiss autofocus>Close</paper-button>
            </div>
        </paper-dialog>

        <rf-keyboard-shortcut route-name="splash" key-code="63" label="?" description="Keyboard shortcut list" on-press="onShortcutHelp"></rf-keyboard-shortcut>

    </template>

    <script>
Polymer({
    is: 'rf-keyboard-shortcuts',
    properties: {
        shortcutCategories: Array,
    },

    attached: function() {
        var notify = function() {
            this.debounce("shortcut-categories", function() {
                this.shortcutCategories = RfKeyboardShortcuts.categorize();
            });
        }.bind(this);

        notify();
        RfKeyboardShortcuts.__notify = notify;
    },

    onShortcutHelp: function(event) {
        this.$['shortcut-help-dialog'].open();
    },
});
    </script>
</dom-module>

<script>
(function(scope) {
    "use strict";

    var RfKeyboardShortcuts = scope.RfKeyboardShortcuts;
    if (!RfKeyboardShortcuts) {
        (function() {
            var shortcuts = {};

            RfKeyboardShortcuts = scope.RfKeyboardShortcuts = {__notify: null};

            RfKeyboardShortcuts.categorize = function() {
                var categories = [], indices = {}, unique = {};

                for (var keyCode in shortcuts) {
                    for (var routeName in shortcuts[keyCode]) {
                        var shortcut = shortcuts[keyCode][routeName], category;
                        if (!(routeName in indices)) {
                            indices[routeName] = categories.length;
                            category = {route: routeName, shortcuts: []};
                            categories.push(category);

                            switch (routeName) {
                                case "feed":
                                    category.description = "Articles list";
                                    break;
                                case "article":
                                    category.description = "Article";
                                    break;
                                case "splash":
                                    category.description = "General";
                                    break;
                            }
                        }

                        if (!unique[routeName + '_' + shortcut.label]) {
                            category = categories[indices[routeName]];
                            category.shortcuts.push({label: shortcut.label, description: shortcut.description});
                            unique[routeName + '_' + shortcut.label] = true;
                        }
                    }
                }

                categories.sort(function(a, b) { return a.route.localeCompare(b.route); });
                for (var i = 0, c; c = categories[i]; ++i) {
                    categories[i].shortcuts.sort(function(a, b) { return a.description.localeCompare(b.description); });
                }

                return categories;
            };

            RfKeyboardShortcuts.register = function(shortcut) {
                if (!shortcuts[shortcut.keyCode]) {
                    shortcuts[shortcut.keyCode] = {};
                }
                shortcuts[shortcut.keyCode][shortcut.routeName] = shortcut;
                if (this.__notify !== null) {
                    this.__notify(shortcut);
                }
            };

            RfKeyboardShortcuts._unregister = function(keyCode, routeName) {
                if (shortcut[keyCode]) {
                    delete shortcuts[keyCode][routeName];
                }
            };

            scope.document.addEventListener('keypress', function(event) {
                var code = event.keyCode || event.charCode,
                    shortcut = shortcuts[code];

                if (!shortcut) {
                    return;
                }

                for (var routeName in shortcut) {
                    if (MoreRouting.isCurrentUrl(routeName)) {
                        shortcut[routeName].fire('press', {keypress: event});
                        break;
                    }
                }
            });
        })();
    }

    Polymer({
        is: 'rf-keyboard-shortcut',
        properties: {
            callback: Function,
            routeName: {
                type: String,
                observer: '_routeNameChanged',
            },
            keyCode: {
                type: Number,
                observer: '_keyCodeChanged',
            },
            label: String,
            description: String,
        },
        _isAttached: false,

        attached: function() {
            RfKeyboardShortcuts.register(this);
            this._isAttached = true;
        },

        _routeNameChanged: function(routeName, old) {
            if (!this._isAttached) {
                return;
            }

            if (this.keyCode && routeName) {
                RfKeyboardShortcuts._unregister(this.keyCode, old);
                RfKeyboardShortcuts.register(this);
            }
        },

        _keyCodeChanged: function(keyCode, old) {
            if (!this._isAttached) {
                return;
            }

            if (keyCode && this.routeName) {
                RfKeyboardShortcuts._unregister(old, this.routeName);
                RfKeyboardShortcuts.register(this);
            }
        },

    })
})(window);
</script>
{% end %}
