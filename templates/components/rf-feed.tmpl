{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/iron-list/iron-list.html">
<link rel="import" href="/dist/iron-pages/iron-pages.html">
<link rel="import" href="/dist/more-routing/more-routing.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-ripple/paper-ripple.html">
<link rel="import" href="/dist/paper-spinner/paper-spinner.html">
<link rel="import" href="/dist/iron-scroll-threshold/iron-scroll-threshold.html">

<link rel="import" href="/component/rf-api">
<link rel="import" href="/component/rf-article">

<dom-module id="rf-feed">
    <style>
.list-container {
    margin: 16px 0 8px;
}

.list-container .empty-list {
    font-family: "Roboto Slab";
    font-variant: small-caps;
    font-size: 2em;
    padding: 0.67em 2em;
}

.card,
rf-article /deep/ .card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 8px;
    margin-bottom: 16px;
}

.article.read {
    color: #999;
}

.article .detail-wrapper .top-image {
    float: left;
    max-width: 8em;
    margin-right: 1em;
    margin-top: 0.3em;
    margin-bottom: 0.3em;
    border-radius: 2px;
    @apply(--shadow-elevation-2dp);
}

.article .detail-wrapper .short-description {
    max-height: 6.0em;
    line-height: 1.25em;
    word-wrap: break-word;
    text-overflow: ellipsis;
    overflow: hidden;
}

.article .title-wrapper .title {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

.title {
    font-size: 1.2em;
    font-weight: 500;
    line-height: 24px;
}

.short-description {
    font-size: 12px;
    line-height: 14px;
    font-weight: 200;
}

.misc-info {
    padding-left: 0.5em;
    padding-top: 0.5em;
}

rf-article /deep/ .index {
    font-family: "Roboto Condensed", serif;
    font-size: smaller;
    font-style: italic;
    padding-left: 0.7em;
}

.short-description,
rf-article /deep/ .article-description {
    font-family: "Roboto Slab", sans-serif;
}

rf-article /deep/ .article-description img {
    max-width: 100%;
    height: auto;
}

rf-article /deep/ .article-anchor {
    text-decoration: none;
    font-weight: 500;
    font-size: 1.2em;
}

rf-article /deep/ .article-link {
    position: relative;
    margin: 0 0.29em;
    padding: 0.7em 0.57em;
    text-transform: uppercase;
    text-decoration: none;
    text-align: center;
    border-radius: 3px;
}

.feed-origin,
rf-article /deep/ .feed-origin {
    font-family: "Roboto Condensed", serif;
    font-size: 11px;
    line-height: 24px;
    font-weight: 200;
    padding-right: 1em;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.publish-date,
rf-article /deep/ .publish-date {
    font-family: "Roboto Condensed", sans-serif;
    font-size: 12px;
    font-style: italic;
    line-height: 14px;
}

rf-article /deep/ .article-control {
    font-family: "Roboto Condensed", sans-serif;
}

@media(min-width: 768px) {
    rf-article /deep/ .card {
        padding: 16px;
    }
}


@media(min-width: 1350px) {
    rf-article /deep/ .card {
        padding: 32px;
    }
}

    </style>
    <template>
        <more-route-selector>
            <iron-pages>
                <div route="feed" class="list-container">
                    <iron-scroll-threshold id="scroll-threshold" lower-threshold="100" on-lower-trigger="onLowerScrollThresholdTrigger"></iron-scroll-threshold>
                    <iron-list items="[[ articles ]]" id="list">
                        <template>
                            <div class$="[[ _computeArticleClass(item.Read, item.Favorite) ]]" data-feed-id$="[[ item.FeedId ]]" data-article-id$="[[ item.Id ]]">
                                <div class="card layout vertical" on-tap="onArticleActivate">
                                    <div class="title-wrapper layout horizontal center">
                                        <paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item.Favorite) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
                                        <span class="title" title$="[[ item.Title ]]" inner-h-t-m-l="[[ _computeArticleTitle(item) ]]"></span>
                                    </div>
                                    <div class="detail-wrapper layout horizontal center">
                                        <span class="short-description flex">
                                            <img src$="[[ item.Thumbnail ]]" class="top-image">
                                            <span inner-h-t-m-l="[[ _computeArticleDescription(item) ]]"></span>
                                            <br style="clear: both">
                                        </span>
                                    </div>
                                    <span class="misc-info layout horizontal center">
                                        <span class="feed-origin" title$="[[ item.FeedOrigin ]]" hidden$="[[ !item.FeedOrigin ]]">[[ item.FeedOrigin ]]</span>
                                        <span class="publish-date" on-tap="onArticleActivate">[[ item.RelativeDate ]]</span>
                                    </span>
                                    <!-- allow the inner elements to receiver pointer events -->
                                    <paper-ripple style="pointer-events: none;"></paper-ripple>
                                </div>
                            </div>
                        </template>
                    </iron-list>
                    <div class="card empty-list" hidden$="[[ articles.length ]]">
                        <span>There are no articles in this section</span>
                    </div>
                </div>
                <rf-article route="article" user="[[ user ]]" id="article" narrow="[[ narrow ]]" articles="[[ articles ]]" on-next-article="onNextArticle" on-previous-article="onPreviousArticle">
                    <template>
                        <div class="article-detail" data-article-id$="[[ item.article.Id ]]">
                            <div class="card layout vertical">
                                <a class="article-anchor title-wrapper" href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item) ]]">
                                    <paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item.article.Favorite) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
                                    <span class="title" title$="[[ item.article.Title ]]">[[ item.article.Title ]]</span>
                                    <small class="index">[[ item.ordinalPosition ]]</small>
                                </a>
                                <div class="misc-info layout horizontal center">
                                    <span class="feed-origin" title$="[[ item.article.FeedOrigin ]]" hidden$="[[ !item.article.FeedOrigin ]]">[[ item.article.FeedOrigin ]]</span>
                                    <span class="publish-date">[[ item.article.RelativeDate ]]</span>
                                </div>
                                <div class="article-content">
                                    <div class="article-description" hidden$="[[ item.summarized ]]"></div>

                                    <div hidden$="[[ !item.summarized ]]">
                                        <div class="article-top-image" hidden$="[[ !item.topImage ]]">
                                            <img src$="[[ item.topImage ]]">
                                        </div>
                                        <ul class="article-summary">
                                            <template is="dom-repeat" as="point" items="[[ item.keyPoints ]]">
                                                <li>[[ point ]]</li>
                                            </template>
                                        </ul>
                                    </div>

                                    <div class="article-buttons layout horizontal">
                                        <a href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item) ]]" class="article-link flex article-control">
                                            View
                                            <paper-ripple></paper-ripple>
                                        </a>
                                        <paper-button class="flex article-control" on-tap="onArticleSummarize" toggles active="[[ _computeArticleToggleSummarize(item) ]]">Summarize</paper-button>
                                        <paper-button class="flex article-control" on-tap="onArticleFormat" toggles active="[[ _computeArticleToggleFormat(item) ]]">Format</paper-button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </template>
                </rf-article>
            </iron-pages>
        </more-route-selector>
        
        <div class="layout vertical center" hidden$="[[ !loading ]]">
            <paper-spinner id="loading-spinner"></paper-spinner>
        </div>

        <rf-api id="feed-articles" method="get-feed-articles" args="[[ _computeFeedArticlesArguments(user.*, tagOrId, limit, offset) ]]" on-rf-api-message="onFeedArticlesMessage" user="[[ user ]]"></rf-api>
        <rf-api id="article-read" method="mark-article-as-read" tag="content-list" on-rf-api-message="onArticleStateMessage" user="[[ user ]]"></rf-api>
        <rf-api id="article-favorite" method="mark-article-as-favorite" tag="content-list"on-rf-api-message="onArticleStateMessage"  user="[[ user ]]"></rf-api>
        <rf-api id="feed-read-all" method="mark-feed-as-read" on-rf-api-message="onFeedReadAllMessage" user="[[ user ]]"></rf-api>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-feed",
            properties: {
                tagOrId: {
                    type: String,
                    observer: '_tagOrIdChanged',
                },
                user: Object,
                limit: {
                    type: Number,
                    value: 200,
                },
                offset: {
                    type: Number,
                    value: 0,
                },
                loading: {
                    type: Boolean,
                    observer: '_loadingChanged',
                },
                feeds: Object,
                articles: Array,
                narrow: Boolean,
            },
            behaviors: [
                NestedRouteBehavior,
            ],
            _lastUpdateTime: 0,
            _tagStripper: document.createElement('div'),

            hasPreviousArticle: function(id) {
                var index = this._articleIndexMap[id === undefined ?
                    MoreRouting.getRouteByName('article').params.articleId :
                    id];

                return index > 0;
            },

            hasNextArticle: function(id) {
                var index = this._articleIndexMap[id === undefined ?
                    MoreRouting.getRouteByName('article').params.articleId :
                    id];

                return index < this.articles.length - 1;
            },

            previousArticle: function(unread) {
                var route = MoreRouting.getRouteByName('article'),
                    article;
                if (route.active) {
                    var index = this._articleIndexMap[route.params.articleId];

                    if (unread) {
                        while (article = this.articles[--index]) {
                            if (!article.Read) {
                                break;
                            }
                        }
                    } else if (index > 0) {
                        article = this.articles[index - 1];
                    }
                } else {
                    if (unread) {
                        var article, index = this.articles.length;
                        while (article = this.articles[--index]) {
                            if (!article.Read) {
                                break;
                            }
                        }
                    } else {
                        article = this.articles[this.articles.length - 1];
                    }
                }

                if (article) {
                    MoreRouting.navigateTo('article', {tagOrId: this.tagOrId, articleId: article.Id});
                }
            },

            nextArticle: function(unread) {
                var route = MoreRouting.getRouteByName('article'),
                    article;
                if (route.active) {
                    var index = this._articleIndexMap[route.params.articleId];

                    if (unread) {
                        while (article = this.articles[++index]) {
                            if (!article.Read) {
                                break
                            }
                        }
                    } else {
                        article = this.articles[index+1]
                    }
                } else {
                    var index = -1;
                    if (unread) {
                        while (article = this.articles[++index]) {
                            if (!article.Read) {
                                break
                            }
                        }
                    } else {
                        article = this.articles[0];
                    }
                }

                if (article) {
                    MoreRouting.navigateTo('article', {tagOrId: this.tagOrId, articleId: article.Id});
                }
            },

            articleState: function(articleId, state) {
                var index = this._articleIndexMap[
                    arguments.length ?
                        articleId :
                        MoreRouting.getRouteByName('article').params.articleId],
                    article = this.articles[index];

                if (arguments.length < 2) {
                    return article;
                }

                if ('Read' in state) {
                    this.$['article-read'].send({id: articleId - 0, value: state.Read});
                }

                if ('Favorite' in state) {
                    this.$['article-favorite'].send({id: articleId - 0, value: state.Favorite});
                }
            },

            refresh: function() {
                this.debounce('feed-refresh', function() {
                    this.loading = true;
                    this.noMoreArticles = false;
                    this.articles = [];
                    this.offset = 0;
                    this.$.article.index = -1;
                    this.$['feed-articles'].send();
                });
            },

            markAllAsRead: function() {
                this.$['feed-read-all'].send({id: this.tagOrId, timestamp: this._lastUpdateTime});
            },

            attached: function() {
                this._articleIndexMap = {};

                // Find the scroller that will be used by the list
                var el = Polymer.dom(this);
                while (el = (el.parentNode || el.host)) {
                    if ('scroller' in el) {
                        this.$['scroll-threshold'].scrollTarget =
                            Polymer.dom(this.root).querySelector('.list-container').scroller = el.scroller;
                        break;
                    }
                }

                this.routeParamObserver('article', 'articleId', function(id) {
                    if (id === null) {
                        this.$.article.index = -1;
                    } else {
                        var i = this._articleIndexMap[id];
                        this.$.article.index = i;

                        if (!this.articles[i].Read) {
                            this.$['article-read'].send({id: id - 0, value: true});
                        }
                    }
                }.bind(this));

                document.addEventListener('keypress', this.onKeypress.bind(this), false);
            },

            onFeedArticlesMessage: function(event, data) {
                if (data.arguments.Articles && data.arguments.Articles.length) {
                    var worker = new Worker('/js/append-articles-worker.js'),
                        data = {
                            current: this.articles,
                            newArticles: data.arguments.Articles
                        };

                    worker.addEventListener('message', function(event) {
                        if (event.data.push.length) {
                            this.push.apply(this, ['articles'].concat(event.data.push));
                        }
                        if (event.data.unshift.length) {
                            var firstVisible = this.$.list.firstVisibleIndex;
                            this.unshift.apply(this, ['articles'].concat(event.data.unshift));
                            this.async(function() {
                                var newIndex = firstVisible + event.data.unshift.length;
                                if (this.$.list.firstVisibleIndex != newIndex) {
                                    this.$.list.scrollToIndex(newIndex);
                                }
                            });
                        }
                        this._articleIndexMap = event.data.indexMap;
                        this.loading = false;
                    }.bind(this));

                    if (isNaN(this.tagOrId)) {
                        data.feeds = this.feeds;
                    }

                    worker.postMessage(data);
                } else {
                    this.noMoreArticles = true;
                    this.loading = false;

                    if (!this.offset) {
                        this.articles = null;
                    }
                }
                this._lastUpdateTime = new Date().getTime();
            },

            onArticleStateMessage: function(event, data) {
                var index = this._articleIndexMap[data.arguments.Id];
                if (index != -1) {
                    var type, args = {};
                    if ('Read' in data.arguments) {
                        type = 'Read';
                    } else if ('Favorite' in data.arguments) {
                        type = 'Favorite';
                    } else {
                        return;
                    }

                    args[type] = data.arguments[type];
                    this.set("articles." + index + "." + type, data.arguments[type]);
                    this.fire('feed-article-state', args);
                }
            },

            onArticleActivate: function(event) {
                event.stopPropagation();

                var el = Polymer.dom(event).localTarget, feedId = null, articleId = null;

                while (el = el.parentNode) {
                    if (el.matches('[data-feed-id]')) {
                        feedId = el.dataset.feedId;
                        articleId = el.dataset.articleId;
                        break;
                    }
                }

                if (articleId !== null) {
                    this.async(function() {
                        MoreRouting.navigateTo('article', {tagOrId: this.tagOrId, articleId: articleId});
                    }.bind(this), 250);
                }
            },

            onFavoriteToggle: function(event) {
                event.preventDefault();
                event.stopPropagation();

                var el = Polymer.dom(event).localTarget, articleId = null;

                while (el = el.parentNode) {
                    if (el.matches('[data-article-id]')) {
                        articleId = el.dataset.articleId;
                        break;
                    }
                }

                if (articleId !== null) {
                    this.articleState(articleId,
                        {Favorite: !this.articleState(articleId).Favorite});
                }
            },

            onFeedReadAllMessage: function(event, data) {
                if (data.success) {
                    for (var i = 0, a; a = this.articles[i]; ++i) {
                        this.set("articles." + i + ".Read", true);
                    }
                }
            },

            onKeypress: function(event) {
                if (!MoreRouting.isCurrentUrl('feed')) {
                    return;
                }

                var code = event.keyCode || event.charCode;

                switch (code) {
                    case 74: // J
                    case 106: // j
                        this.nextArticle(event.shiftKey);
                        break;
                    case 75: // K
                    case 107: // k
                        this.previousArticle(event.shiftKey);
                        break;
                    case 72: // H
                    case 104: // h
                        MoreRouting.navigateTo('feed', {tagOrId: this.tagOrId});
                        break;
                    case 86: // V
                    case 118: // v
                        break;
                    case 77: // M
                    case 109: // m
                        break;
                    case 67: // C
                    case 99: // c
                        break;
                    case 83: // S
                    case 115: // s
                        break;
                    case 82: // R
                    case 114: // r
                        break;
                    case 70: // F
                    case 102: // f
                        break;
                    case 63: // ?
                        break;
                }
            },

            onLowerScrollThresholdTrigger: function(event) {
                Polymer.dom(event).localTarget.clearLower();
                if (this.noMoreArticles) {
                    return;
                }
                this.debounce('feed-refresh', function() {
                    this.loading = true;
                    this.offset += this.limit;
                    this.$['feed-articles'].send();
                });
            },

            _tagOrIdChanged: function(tagOrId, oldValue) {
                this.refresh();
            },

            _loadingChanged: function(loading, old) {
                if (loading) {
                    this.$['loading-spinner'].reset();
                    this.$['loading-spinner'].active = true;
                } else {
                    this.$['loading-spinner'].active = false;
                }
            },

            _computeFeedArticlesArguments: function(userRecord, tagOrId, limit, offset) {
                return {
                    id: tagOrId,
                    limit: limit,
                    offset: offset,
                    newerFirst: userRecord.base.ProfileData.newerFirst || false,
                    unreadOnly: userRecord.base.ProfileData.unreadOnly || false,
                };
            },

            _computeArticleClass: function(read, favorite) {
                var classList = ["article"]
                if (read) {
                    classList.push("read");
                }

                if (favorite) {
                    classList.push("favorite");
                }

                return classList.join(' ');
            },

            _computeFavoriteIcon: function(favorite) {
                return favorite ? 'bookmark' : 'bookmark-border';
            },

            _computeArticleTitle: function(item) {
                if (item.Hit && item.Hit.fragments && item.Hit.fragments.Title) {
                    this._tagStripper.innerHTML = item.Hit.fragments.Title;

                    return this._tagStripper.innerHTML;
                }
                return this._stripTags(item.Title);
            },

            _computeArticleDescription: function(item) {
                if (item.Hit && item.Hit.fragments && item.Hit.fragments.Description) {
                    this._tagStripper.innerHTML = item.Hit.fragments.Description;

                    return this._tagStripper.innerHTML;
                }
                return this._stripTags(item.Description);
            },

            _computeArticleTarget: function(item) {
                return "feed-article-" + item.article.Id;
            },

            _stripTags: function(html) {
                this._tagStripper.innerHTML = html;

                return this._tagStripper.textContent || "";
            },

        })
    </script>
</dom-module>
{% end %}
