{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/iron-list/iron-list.html">
<link rel="import" href="/dist/iron-pages/iron-pages.html">
<link rel="import" href="/dist/more-routing/more-routing.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-ripple/paper-ripple.html">
<link rel="import" href="/dist/paper-spinner/paper-spinner.html">

<link rel="import" href="/component/rf-api">
<link rel="import" href="/component/rf-article">

<dom-module id="rf-feed">
    <style>
.list-container {
    margin: 16px 0 8px;
}

.card,
rf-article /deep/ .card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 8px;
    margin-bottom: 16px;
}

.card > .list-wrapper {
    position: relative;
}

.article.read {
    color: #999;
}

.article .title-wrapper .top-image {
    float: left;
    max-width: 8em;
    margin-right: 1em;
    margin-top: 0.3em;
    margin-bottom: 0.3em;
    border-radius: 2px;
    @apply(--shadow-elevation-2dp);
}

.article .title-wrapper .short-description {
    max-height: 6.0em;
    line-height: 1.25em;
    word-wrap: break-word;
    text-overflow: ellipsis;
    overflow: hidden;
}

.article .title-wrapper .title {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

.title {
    font-size: 1.2em;
    font-weight: 500;
    line-height: 24px;
}

.short-description {
    font-size: 12px;
    line-height: 14px;
    font-weight: 200;
}

.misc-info {
    width: 80px;
    padding-left: 0.5em;
}

rf-article /deep/ .index {
    font-family: "Roboto Condensed", serif;
    font-size: smaller;
    font-style: italic;
    padding-left: 0.7em;
}

.short-description,
rf-article /deep/ .article-description {
    font-family: "Roboto Slab", sans-serif;
}

rf-article /deep/ .article-description img {
    max-width: 100%;
    height: auto;
}

rf-article /deep/ .article-anchor {
    text-decoration: none;
    font-weight: 500;
    font-size: 1.2em;
}

rf-article /deep/ .article-link {
    position: relative;
    margin: 0 0.29em;
    padding: 0.7em 0.57em;
    text-transform: uppercase;
    text-decoration: none;
    text-align: center;
    border-radius: 3px;
}

rf-article[narrow] /deep/ .article-description object,
rf-article[narrow] /deep/ .article-description iframe {
    max-width: 100%;
    width: auto;
    height: auto;
}

.feed-origin,
rf-article /deep/ .feed-origin {
    font-family: "Roboto Condensed", serif;
    font-size: 11px;
    line-height: 24px;
    font-weight: 200;
    padding-right: 1em;
    width: 80px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.publish-date,
rf-article /deep/ .publish-date {
    font-family: "Roboto Condensed", sans-serif;
    font-size: 12px;
    font-style: italic;
    line-height: 14px;
}

rf-article /deep/ .article-control {
    font-family: "Roboto Condensed", sans-serif;
}

@media(min-width: 768px) {
    rf-article /deep/ .card {
        padding: 16px;
    }
}


@media(min-width: 1350px) {
    rf-article /deep/ .card {
        padding: 32px;
    }
}

    </style>
    <template>
        <more-route-selector>
            <iron-pages>
                <div route="feed" class="list-container">
                    <iron-list items="[[ articles ]]">
                        <template>
                            <div class$="[[ _computeArticleClass(item) ]]" id$="[[ item.Id ]]" data-feed-id$="[[ item.FeedId ]]">
                                <div class="card layout vertical" on-tap="onArticleActivate">
                                    <div class="list-wrapper layout horizontal center">
                                        <paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
                                        <span class="title-wrapper flex layout vertical"  on-tap="onArticleActivate">
                                            <span class="title" title$="[[ item.Title ]]">[[ _computeArticleTitle(item) ]]</span>
                                            <span class="flex layout horizontal center">
                                                <span class="short-description flex">
                                                    <img src$="[[ _computeArticleTopImage(item) ]]" class="top-image">
                                                    <span>[[ _computeArticleDescription(item) ]]</span>
                                                    <br style="clear: both">
                                                </span>
                                            </span>
                                        </span>
                                        <span class="misc-info layout vertical">
                                            <span class="feed-origin" title$="[[ item.FeedOrigin ]]" hidden$="[[ !item.FeedOrigin ]]">[[ item.FeedOrigin ]]</span>
                                            <span class="publish-date" on-tap="onArticleActivate">[[ item.RelativeDate ]]</span>
                                        </span>
                                    </div>
                                    <!-- allow the inner elements to receiver pointer events -->
                                    <paper-ripple style="pointer-events: none;"></paper-ripple>
                                </div>
                            </div>
                        </template>
                    </iron-list>
                </div>
                <rf-article route="article" user="[[ user ]]" id="article" narrow="[[ narrow ]]" on-next-article="onNextArticle" on-previous-article="onPreviousArticle">
                    <template>
                        <div class="article-detail">
                            <div class="card layout vertical">
                                <div class="article-header layout horizontal center">
                                    <paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
                                    <span flex class="title-wrapper layout vertical">
                                        <a class="article-anchor" href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item) ]]">
                                            <span class="title" title$="[[ item.article.Title ]]">[[ item.article.Title ]]</span>
                                            <small class="index">[[ item.ordinalPosition ]]</small>
                                        </a>
                                        <span class="layout horizontal center">
                                            <span class="feed-origin" title$="[[ item.article.FeedOrigin ]]" hidden$="[[ !item.article.FeedOrigin ]]">[[ item.article.FeedOrigin ]]</span>
                                            <span class="publish-date">[[ item.article.RelativeDate ]]</span>
                                        </span>
                                    </span>
                                </div>
                                <div class="article-content">
                                    <div class="article-description" hidden$="[[ item.summarized ]]"></div>

                                    <div hidden$="[[ !item.summarized ]]">
                                        <div class="article-top-image" hidden$="[[ !item.topImage ]]">
                                            <img src$="[[ item.topImage ]]">
                                        </div>
                                        <ul class="article-summary">
                                            <template is="dom-repeat" as="point" items="[[ item.keyPoints ]]">
                                                <li>[[ point ]]</li>
                                            </template>
                                        </ul>
                                    </div>

                                    <div class="article-buttons layout horizontal">
                                        <a href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item) ]]" class="article-link flex article-control">
                                            View
                                            <paper-ripple></paper-ripple>
                                        </a>
                                        <paper-button class="flex article-control" on-tap="onArticleSummarize" toggles active="[[ _computeArticleToggleSummarize(item) ]]">Summarize</paper-button>
                                        <paper-button class="flex article-control" on-tap="onArticleFormat" toggles active="[[ _computeArticleToggleFormat(item) ]]">Format</paper-button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </template>
                </rf-article>
            </iron-pages>
        </more-route-selector>
        
        <div class="layout vertical center" hidden$="[[ !loading ]]">
            <paper-spinner id="loading-spinner"></paper-spinner>
        </div>
        <rf-api id="feed-articles" method="get-feed-articles" args="[[ _computeFeedArticlesArguments(user, tagOrId, limit, offset) ]]" on-rf-api-message="onFeedArticlesMessage" user="{{ user }}"></rf-api>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-feed",
            properties: {
                tagOrId: {
                    type: String,
                    observer: '_tagOrIdChanged',
                },
                user: {
                    type: Object,
                    observer: '_userChanged',
                },
                limit: {
                    type: Number,
                    value: 200,
                },
                offset: {
                    type: Number,
                    value: 0,
                },
                loading: {
                    type: Boolean,
                    observer: '_loadingChanged',
                },
                feeds: Object,
                articles: Array,
                narrow: Boolean,
            },
            behaviors: [
                NestedRouteBehavior,
            ],
            _lastUpdateTime: 0,
            _tagStripper: document.createElement('div'),

            attached: function() {
                this._articleIndexMap = {};

                // Find the scroller that will be used by the list
                var el = Polymer.dom(this);
                while (el = (el.parentNode || el.host)) {
                    if ('scroller' in el) {
                        Polymer.dom(this.root).querySelector('.list-container').scroller = el.scroller;
                        break;
                    }
                }

                this.routeParamObserver('article', 'articleId', function(value) {
                    var i = this._articleIndexMap[value];
                    this.$.article.setArticles(this.articles[i], this.articles[i-1], this.articles[i+1], i);
                }.bind(this));

                document.addEventListener('keypress', this.onKeypress.bind(this), false);
            },

            onFeedArticlesMessage: function(event, data) {
                if (data.arguments.Articles && data.arguments.Articles.length) {
                    var worker = new Worker('/js/append-articles-worker.js'),
                        data = {
                            current: this.articles,
                            newArticles: data.arguments.Articles
                        };

                    worker.addEventListener('message', function(event) {
                        this.articles = event.data.articles;
                        this._articleIndexMap = event.data.indexMap;
                        this.loading = false;
                    }.bind(this));

                    if (isNaN(this.tagOrId)) {
                        data.feeds = this.feeds;
                    }

                    worker.postMessage(data);
                } else {
                    this.noMoreArticles = true;
                    this.loading = false;

                    if (!this.offset) {
                        this.articles = null;
                    }
                }
                this._lastUpdateTime = new Date().getTime();
            },

            onArticleActivate: function(event) {
                var el = Polymer.dom(event.target), feedId = null, articleId = null;

                while (el = el.parentNode) {
                    if (el.matches('[data-feed-id]')) {
                        feedId = el.getAttribute('data-feed-id');
                        articleId = el.id;
                        break;
                    }
                }

                if (articleId !== null) {
                    this.async(function() {
                        MoreRouting.navigateTo('article', {tagOrId: this.tagOrId, articleId: articleId});
                    }.bind(this), 250);
                }
            },

            onFavoriteToggle: function(event) {
                event.preventDefault();
                event.stopPropagation();
            },

            onKeypress: function(event) {
                if (!MoreRouting.isCurrentUrl('feed')) {
                    return;
                }

                var code = event.keyCode || event.charCode;

                switch (code) {
                    case 74: // J
                    case 106: // j
                        break;
                    case 75: // K
                    case 107: // k
                        break;
                    case 72: // H
                    case 104: // h
                        break;
                    case 86: // V
                    case 118: // v
                        break;
                    case 77: // M
                    case 109: // m
                        break;
                    case 67: // C
                    case 99: // c
                        break;
                    case 83: // S
                    case 115: // s
                        break;
                    case 82: // R
                    case 114: // r
                        break;
                    case 70: // F
                    case 102: // f
                        break;
                    case 63: // ?
                        break;
                }
            },

            _tagOrIdChanged: function(tagOrId, oldValue) {
                this.async(function() {
                    this.loading = true;
                    this.articles = null;
                    this.$['feed-articles'].send();
                }.bind(this));
            },

            _userChanged: function(user, oldValue) {
                console.log("userChanged", user, oldValue);
            },

            _loadingChanged: function(loading, old) {
                if (loading) {
                    this.$['loading-spinner'].reset();
                    this.$['loading-spinner'].active = true;
                } else {
                    this.$['loading-spinner'].active = false;
                }
            },

            _computeFeedArticlesArguments: function(user, tagOrId, limit, offset) {
                return {id: tagOrId, limit: limit, offset: offset, newerFirst: user.ProfileData.newerFirst || false, unreadOnly: user.ProfileData.unreadOnly || false};
            },

            _computeArticleClass: function(item) {
                var classList = ["article"]
                if (item.Read) {
                    classList.push("read");
                }

                if (item.Favorite) {
                    classList.push("favorite");
                }

                return classList.join(' ');
            },

            _computeFavoriteIcon: function(item) {
                return item.Favorite ? 'bookmark' : 'bookmark-border';
            },

            _computeArticleTitle: function(item) {
                return this._stripTags(
                    item.Hit && item.Hit.fragment && item.Hit.fragments.Title ?
                        item.Hit.fragments.Title :
                        item.Title
                    );
            },

            _computeArticleDescription: function(item) {
                return this._stripTags(
                    item.Hit && item.Hit.fragment && item.Hit.fragments.Description ?
                        item.Hit.fragments.Description :
                        item.Description
                    );
            },

            _computeArticleTopImage: function(item) {
                return this._findTopImage(item.Description);
            },

            _computeArticleTarget: function(item) {
                return "feed-article-" + item.article.Id;
            },

            _stripTags: function(html) {
                this._tagStripper.innerHTML = html;

                return this._tagStripper.textContent || "";
            },

            _findTopImage: function(html) {
                this._tagStripper.innerHTML = html;

                var img = this._tagStripper.querySelector('img');

                return img && img.src;
            },

            _updateFeedArticles: function() {
            },
        })
    </script>
</dom-module>
{% end %}
