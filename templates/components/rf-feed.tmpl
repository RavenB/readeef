{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/iron-list/iron-list.html">
<link rel="import" href="/dist/iron-pages/iron-pages.html">
<link rel="import" href="/dist/more-routing/more-route-template-helpers.html">
<link rel="import" href="/dist/more-routing/more-routing.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-ripple/paper-ripple.html">
<link rel="import" href="/dist/paper-spinner/paper-spinner.html">
<link rel="import" href="/dist/iron-scroll-threshold/iron-scroll-threshold.html">
<link rel="import" href="/dist/neon-animation/animations/scale-up-animation.html">
<link rel="import" href="/dist/neon-animation/animations/fade-out-animation.html">

<link rel="import" href="/component/rf-api">
<link rel="import" href="/component/rf-article">

<dom-module id="rf-feed">
    <style>
.list-container {
    margin: 16px 0 8px;
}

.card,
rf-article /deep/ .card {
    @apply(--card-style);
    @apply(--shadow-elevation-4dp);
    padding: 8px;
    margin-bottom: 16px;
}

.article.read {
    color: #999;
}

.article .detail-wrapper .top-image {
    float: left;
    max-width: 8em;
    margin-right: 1em;
    margin-top: 0.3em;
    margin-bottom: 0.3em;
    border-radius: 2px;
    @apply(--shadow-elevation-2dp);
}

.article .detail-wrapper .short-description {
    max-height: 6.0em;
    line-height: 1.25em;
    word-wrap: break-word;
    text-overflow: ellipsis;
    overflow: hidden;
}

.article .title-wrapper .title {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

.title {
    font-size: 1.2em;
    font-weight: 500;
    line-height: 24px;
}

.short-description {
    font-size: 12px;
    line-height: 14px;
    font-weight: 200;
}

.misc-info {
    padding-left: 0.5em;
    padding-top: 0.5em;
}

.list-article {
    text-decoration: none;
}

rf-article /deep/ .index {
    font-family: "Roboto Condensed", serif;
    font-size: smaller;
    font-style: italic;
    padding-left: 0.7em;
}

.short-description,
rf-article /deep/ .article-description {
    font-family: "Roboto Slab", sans-serif;
}

rf-article /deep/ .article-description img {
    max-width: 100%;
    height: auto;
}

rf-article /deep/ .article-anchor {
    text-decoration: none;
    font-weight: 500;
    font-size: 1.2em;
}

rf-article /deep/ .article-link {
    position: relative;
    margin: 0 0.29em;
    padding: 0.7em 0.57em;
    text-transform: uppercase;
    text-decoration: none;
    text-align: center;
    border-radius: 3px;
}

.feed-origin,
rf-article /deep/ .feed-origin {
    font-family: "Roboto Condensed", serif;
    font-size: 11px;
    line-height: 24px;
    font-weight: 200;
    padding-right: 1em;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.publish-date,
rf-article /deep/ .publish-date {
    font-family: "Roboto Condensed", sans-serif;
    font-size: 12px;
    font-style: italic;
    line-height: 14px;
}

rf-article /deep/ .article-control {
    font-family: "Roboto Condensed", sans-serif;
}

rf-article /deep/ .article-top-image {
    text-align: center;
}

#shortcut-help-dialog ul {
    padding: 0;
}

#shortcut-help-dialog li {
    padding: 8px;
    list-style: none;
}
#shortcut-help-dialog h4 {
    margin: 0;
    margin-top: 1em;
}
#shortcut-help-dialog .key {
    padding: 0.3em;
    background-color: #eee;
    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);
    border-radius: 3px;
}

@media(min-width: 768px) {
    rf-article /deep/ .card {
        padding: 16px;
    }
}


@media(min-width: 1350px) {
    rf-article /deep/ .card {
        padding: 32px;
    }
}

    </style>
    <template>
        <more-route-selector>
            <iron-pages>
                <div route="feed" class="list-container">
                    <iron-list items="[[ articles ]]" id="list">
                        <template>
                            <a is="pushstate-anchor" href="[[ _computeArticleLink(item.Id, 'main') ]]" class="list-article">
                                <div class$="[[ _computeArticleClass(item.Read, item.Favorite) ]]" data-feed-id$="[[ item.FeedId ]]" data-article-id$="[[ item.Id ]]">
                                    <div class="card layout vertical">
                                        <div class="title-wrapper layout horizontal center">
                                            <paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item.Favorite) ]]" on-tap="onFavoriteToggle" on-click="onFavoriteClick"></paper-icon-button>
                                            <span class="title" title$="[[ item.Title ]]" inner-h-t-m-l="[[ _computeArticleTitle(item.Title, item.Hit.*) ]]"></span>
                                        </div>
                                        <div class="detail-wrapper layout horizontal center">
                                            <span class="short-description flex">
                                                <img src$="[[ item.Thumbnail ]]" class="top-image">
                                                <span inner-h-t-m-l="[[ _computeArticleDescription(item.Description, item.Hit.*) ]]"></span>
                                                <br style="clear: both">
                                            </span>
                                        </div>
                                        <span class="misc-info layout horizontal center">
                                            <span class="feed-origin" title$="[[ item.FeedOrigin ]]" hidden$="[[ !item.FeedOrigin ]]">[[ item.FeedOrigin ]]</span>
                                            <span class="publish-date">[[ item.RelativeDate ]]</span>
                                        </span>
                                        <!-- allow the inner elements to receiver pointer events -->
                                        <paper-ripple style="pointer-events: none;"></paper-ripple>
                                    </div>
                                </div>
                            </a>
                        </template>
                    </iron-list>
                </div>
                <rf-article route="article" user="[[ user ]]" id="article" narrow="[[ narrow ]]" articles="[[ articles ]]" on-next-article="onNextArticle" on-previous-article="onPreviousArticle">
                    <template>
                        <div class="article-detail" data-article-id$="[[ item.article.Id ]]">
                            <div class="card layout vertical">
                                <a class="article-anchor title-wrapper" href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item.article) ]]">
                                    <paper-icon-button class="favorite-button" icon="[[ _computeFavoriteIcon(item.article.Favorite) ]]" on-tap="onFavoriteToggle"></paper-icon-button>
                                    <span class="title" title$="[[ item.article.Title ]]">[[ item.article.Title ]]</span>
                                    <small class="index">[[ item.ordinalPosition ]]</small>
                                </a>
                                <div class="misc-info layout horizontal center">
                                    <span class="feed-origin" title$="[[ item.article.FeedOrigin ]]" hidden$="[[ !item.article.FeedOrigin ]]">[[ item.article.FeedOrigin ]]</span>
                                    <span class="publish-date">[[ item.article.RelativeDate ]]</span>
                                </div>
                                <div class="article-content">
                                    <div class="article-description" hidden$="[[ item.article.summarized ]]"></div>

                                    <div hidden$="[[ !item.article.summarized ]]">
                                        <div class="article-top-image" hidden$="[[ !item.article.topImage ]]">
                                            <img src$="[[ item.article.topImage ]]">
                                        </div>
                                        <ul class="article-summary">
                                            <template is="dom-repeat" as="point" items="[[ item.article.keyPoints ]]">
                                                <li>[[ point ]]</li>
                                            </template>
                                        </ul>
                                    </div>

                                    <div class="article-buttons layout horizontal">
                                        <a href$="[[ item.article.Link ]]" target$="[[ _computeArticleTarget(item.article) ]]" class="article-link flex article-control">
                                            View
                                            <paper-ripple></paper-ripple>
                                        </a>
                                        <paper-spinner class="loading-dependant" hidden="[[ !item.article.summarizing ]]"></paper-spinner>
                                        <a is="pushstate-anchor" href="[[ _computeArticleLink(item.article.Id, 'summary') ]]" class="article-link article-control" hidden="[[ item.article.summarizing ]]">
                                            Summarize
                                            <paper-ripple></paper-ripple>
                                        </a>
                                        <paper-spinner class="loading-dependant" hidden="[[ !item.article.formatting ]]"></paper-spinner>
                                        <a is="pushstate-anchor" href="[[ _computeArticleLink(item.article.Id, 'format') ]]" class="article-link article-control" hidden="[[ item.article.formatting ]]">
                                            Format
                                            <paper-ripple></paper-ripple>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </template>
                </rf-article>
            </iron-pages>
        </more-route-selector>
        
        <paper-dialog id="shortcut-help-dialog" entry-animation="scale-up-animation" exit-animation="fade-out-animation" modal>
            <h2>Keyboard shortcuts</h2>

            <div class="layout horizontal wrap">
                <ul>
                    <li><h4>Article list</h4></li>
                    <li><span class="key">/</span> Search </li>
                    <li><span class="key">j</span> Open the first loaded article </li>
                    <li><span class="key">Shift + j</span> Open the first loaded unread article </li>
                    <li><span class="key">k</span> Open the last loaded article </li>
                    <li><span class="key">Shift + k</span> Open the last loaded unread article </li>
                </ul>

                <ul>
                    <li><h4>Article</h4></li>
                    <li><span class="key">j</span> Go to the next loaded article </li>
                    <li><span class="key">Shift + j</span> Go to the next unread loaded article </li>
                    <li><span class="key">k</span> Go to the previous loaded article </li>
                    <li><span class="key">Shift + k</span> Go to the previous loaded unread article </li>
                    <li><span class="key">h</span> Go back to the article list </li>
                    <li><span class="key">v</span> Open the article's link in a new tab </li>
                    <li><span class="key">m</span> Toggle the read state of the article </li>
                    <li><span class="key">f</span> Toggle the favorite state of the article </li>
                    <li><span class="key">c</span> Format the article's content </li>
                    <li><span class="key">s</span> Summarize the article </li>
                </ul>

                <ul>
                    <li><h4>Article list or article </h4></li>
                    <li><span class="key">?</span> Keyboard shortcut help </li>
                    <li><span class="key">r</span> Fetch the latest articles and refresh the list </li>
                </ul>
            </div>

            <div class="buttons">
                <paper-button dialog-dismiss autofocus>Close</paper-button>
            </div>
        </paper-dialog>

        <rf-api id="article-read" method="mark-article-as-read" tag="content-list" on-rf-api-message="onArticleStateMessage" user="[[ user ]]"></rf-api>
        <rf-api id="article-favorite" method="mark-article-as-favorite" tag="content-list"on-rf-api-message="onArticleStateMessage"  user="[[ user ]]"></rf-api>
        <rf-api id="article-format" method="format-article" on-rf-api-message="onArticleFormatMessage" user="[[ user ]]"></rf-api>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-feed",
            properties: {
                tagOrId: {
                    type: String,
                    observer: '_tagOrIdChanged',
                },
                user: Object,
                feeds: Object,
                articles: Array,
                narrow: Boolean,
            },
            behaviors: [
                NestedRouteBehavior,
                MoreRouting.TemplateHelpers,
            ],
            observers: [
                '_articlesChanged(articles.*)',
            ],
            _firstVisibleIndex: 0,
            _tagStripper: document.createElement('div'),

            articleState: function(articleId, state) {
                var index = this.articles.find(articleId);

                if ('Read' in state) {
                    this.$['article-read'].send({id: articleId - 0, value: state.Read});
                }

                if ('Favorite' in state) {
                    this.$['article-favorite'].send({id: articleId - 0, value: state.Favorite});
                }
            },

            attached: function() {
                this._relativeDateWorker = new Worker('/js/relative-date-worker.js');
                this._relativeDateWorker.addEventListener('message', this._handleRelativeDateWorkerMessage.bind(this));

                // Find the scroller that will be used by the list
                var el = Polymer.dom(this);
                while (el = (el.parentNode || el.host)) {
                    if ('scroller' in el) {
                        this._scroller =
                            Polymer.dom(this.root).querySelector('.list-container').scroller = el.scroller;
                        break;
                    }
                }

                this.routeParamObserver('article', 'articleId', function(id) {
                    if (id === null) {
                        this.$.article.index = -1;
                        this.$.list.scrollToIndex(this._firstVisibleIndex);
                    } else {
                        var i = this.articles.findIndex(id);
                        this.$.article.index = i;
                        this._scroller.scrollTop = 0;
                        this._firstVisibleIndex = this.$.list.firstVisibleIndex;

                        if (!this.articles[i].Read) {
                            this.$['article-read'].send({id: id - 0, value: true});
                        }
                    }
                }.bind(this));

                this.routeParamObserver('article-format', 'type', function(type) {
                    var route = MoreRouting.getRouteByName('article-format'),
                        articleId = route.params.articleId,
                        index = this.articles.findIndex(articleId),
                        article = this.articles[index];

                    switch (type) {
                        case "format":
                            this.set('articles.' + index + '.summarized', false);
                            if (article.formatted || article.formattedDescription) {
                                this.set('articles.' + index + '.formatted', !article.formatted);
                                return;
                            }

                            if (!article.formatted && !article.formatting) {
                                this.set('articles.' + index + '.formatting', true);
                                this.$['article-format'].send({id: articleId - 0});
                            }
                            break;
                        case "summary":
                            this.set('articles.' + index + '.formatted', false);
                            if (article.summarized || article.keyPoints) {
                                this.set('articles.' + index + '.summarized', !article.summarized);
                                return;
                            }

                            if (!article.summarized && !article.summarizing) {
                                this.set('articles.' + index + '.summarizing', true);
                                this.$['article-format'].send({id: articleId - 0});
                            }
                            break;
                            break;
                        case null:
                            break;
                        default:
                            return this.async(function() {
                                MoreRouting.navigateTo('article',
                                        {tagOrId: route.params.tagOrId, articleId: articleId});
                            });
                    }
                }.bind(this));

                document.addEventListener('keypress', this.onKeypress.bind(this), false);

                setInterval(function() {
                    this._updateRelativeDates();
                }.bind(this), 60000);
            },

            onArticleStateMessage: function(event, data) {
                var index = this.articles.findIndex(data.arguments.Id);
                if (index != -1) {
                    var type, args = {};
                    if ('Read' in data.arguments) {
                        type = 'Read';
                    } else if ('Favorite' in data.arguments) {
                        type = 'Favorite';
                    } else {
                        return;
                    }

                    args[type] = data.arguments[type];
                    this.set("articles." + index + "." + type, data.arguments[type]);
                    this.fire('feed-article-state', args);
                }
            },

            onArticleFormatMessage: function(event, data) {
                var index = this.articles.findIndex(data.arguments.Id),
                    article = this.articles[index];

                this.set("articles." + index + ".formattedDescription", data.arguments.Content);
                this.set("articles." + index + ".keyPoints", data.arguments.KeyPoints);
                this.set("articles." + index + ".topImage", data.arguments.TopImage);

                if (article.summarizing) {
                    this.set("articles." + index + ".summarizing", false);
                    this.set("articles." + index + ".summarized", true);
                }

                if (article.formatting) {
                    this.set("articles." + index + ".formatting", false);
                    this.set("articles." + index + ".formatted", true);
                }
            },

            onFavoriteClick: function(event) {
                // Stop the pushstate-anchor from activating
                event.preventDefault();
                event.stopPropagation();
            },

            onFavoriteToggle: function(event) {
                event.preventDefault();
                event.stopPropagation();

                var el = Polymer.dom(event).localTarget, articleId = null;

                while (el = el.parentNode) {
                    if (el.matches('[data-article-id]')) {
                        articleId = el.dataset.articleId;
                        break;
                    }
                }

                if (articleId !== null) {
                    this.articleState(articleId,
                        {Favorite: !this.articles.find(articleId).Favorite});
                }
            },

            onKeypress: function(event) {
                if (!MoreRouting.isCurrentUrl('feed')) {
                    return;
                }

                var code = event.keyCode || event.charCode,
                    articleRoute = MoreRouting.getRouteByName('article');

                switch (code) {
                    case 86: // V
                    case 118: // v
                        if (!articleRoute.active) {
                            return;
                        }

                        var article = this.articles.find(articleRoute.params.articleId);

                        window.open(article.Link, this._computeArticleTarget(article));
                        break;
                    case 77: // M
                    case 109: // m
                        if (!articleRoute.active) {
                            return;
                        }

                        this.articleState(articleRoute.params.articleId,
                            {Read: !this.articles.find(articleRoute.params.articleId).Read});
                        break;
                    case 67: // C
                    case 99: // c
                        if (!articleRoute.active) {
                            return;
                        }

                        MoreRouting.navigateTo('article-format',
                                {tagOrId: this.tagOrId, articleId: articleRoute.params.articleId, type: 'format'});
                        break;
                    case 83: // S
                    case 115: // s
                        if (!articleRoute.active) {
                            return;
                        }

                        MoreRouting.navigateTo('article-format',
                                {tagOrId: this.tagOrId, articleId: articleRoute.params.articleId, type: 'summary'});
                        break;
                    case 70: // F
                    case 102: // f
                        if (!articleRoute.active) {
                            return;
                        }

                        this.articleState(articleRoute.params.articleId,
                            {Favorite: !this.articles.find(articleRoute.params.articleId).Favorite});
                        break;
                    case 63: // ?
                        this.$['shortcut-help-dialog'].open();
                        break;
                }
            },

            _tagOrIdChanged: function(tagOrId, oldValue) {
                this._firstVisibleIndex = 0;
            },

            _articlesChanged: function(record) {
                if (!record.base.length) {
                    this.$.article.index = -1;
                } else if (record.path == 'articles.splices') {
                    var articleActive = MoreRouting.isCurrentUrl('article'),
                        newIndex = articleActive ? this._firstVisibleIndex : this.$.list.firstVisibleIndex,
                        originalIndex = newIndex, changeCount = 0;

                    for (var i = 0, s; s = record.value.indexSplices[i]; ++i) {
                        if (s.index <= originalIndex) {
                            changeCount += s.addedCount - s.removed.length;
                            newIndex = newIndex + changeCount;
                        }
                    }

                    if (articleActive) {
                        this._firstVisibleIndex = newIndex;
                    } else {
                        this.async(function() {
                            if (changeCount == record.base.length) {
                                newIndex = 0;
                            }
                            this.$.list.scrollToIndex(newIndex);
                        });
                    }
                }
            },

            _computeArticleLink: function(articleId, type) {
                switch (type) {
                    case "main":
                        return this.urlFor('article', {tagOrId: this.tagOrId, articleId: articleId});
                    case "summary":
                    case "format":
                        return this.urlFor('article-format', {tagOrId: this.tagOrId, articleId: articleId, type: type});
                }
            },


            _computeArticleClass: function(read, favorite) {
                var classList = ["article"]
                if (read) {
                    classList.push("read");
                }

                if (favorite) {
                    classList.push("favorite");
                }

                return classList.join(' ');
            },

            _computeFavoriteIcon: function(favorite) {
                return favorite ? 'bookmark' : 'bookmark-border';
            },

            _computeArticleTitle: function(title, hitRecord) {
                if (hitRecord.base.fragments && hitRecord.base.fragments.Title) {
                    this._tagStripper.innerHTML = hitRecord.base.fragments.Title;

                    return this._tagStripper.innerHTML;
                }

                return this._stripTags(title);
            },

            _computeArticleDescription: function(description, hitRecord) {
                if (hitRecord.base.fragments && hitRecord.base.fragments.Description) {
                    this._tagStripper.innerHTML = hitRecord.base.fragments.Description;

                    return this._tagStripper.innerHTML;
                }
                return this._stripTags(description);
            },

            _computeArticleTarget: function(article) {
                return "feed-article-" + article.Id;
            },

            _stripTags: function(html) {
                this._tagStripper.innerHTML = html;

                return this._tagStripper.textContent || "";
            },

            _updateRelativeDates: function() {
                if (!MoreRouting.isCurrentUrl('feed') || !this.articles || !this.articles.length) {
                    return;
                }

                this._relativeDateWorker.postMessage({
                    articles: [].concat(this.articles), tagOrId: this.tagOrId});
            },

            _handleRelativeDateWorkerMessage: function(event) {
                if (this.tagOrId == event.data.tagOrId) {

                    var dates = event.data.dates;

                    for (var i = 0, a, d; a = this.articles[i]; ++i) {
                        d = dates[a.Id];
                        if (d) {
                            this.set("articles." + i + ".RelativeDate", d);
                        }
                    }
                }
            },

        })
    </script>
</dom-module>
{% end %}
