{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/core-animated-pages/core-animated-pages.html">
<link rel="import" href="/dist/core-animated-pages/transitions/slide-from-right.html">

<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-checkbox/paper-checkbox.html">
<link rel="import" href="/dist/paper-fab/paper-fab.html">
<link rel="import" href="/dist/paper-input/paper-input.html">
<link rel="import" href="/dist/paper-dropdown/paper-dropdown.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog-transition.html">

<link rel="import" href="/dist/loading-wave/loading-wave.html">

<link rel="import" href="/component/rf-api">

<polymer-element name="rf-settings" attributes="wide user settings feeds display" layout horizontal center-justified>
    <template>
        <style>
            core-animated-pages > section[active] {
                position: relative;
            }

            .card {
                background-color: #fff;
                box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.16);
                border-radius: 3px;
                margin: 16px;
                padding: 24px;
                max-width: 1024px;
            }

            #dropdown {
                background: transparent;
                margin-left: 24px;
            }

            ul {
                padding: 0;
            }

            li {
                padding: 8px;
                list-style: none;
            }
            li paper-checkbox {
                margin-right: 8px;
            }

            [name="feeds"] li span {
                line-height: 40px;
            }

            .feed-favicon {
                margin-right: 5px;
            }

            .theme-bubbles {
                margin: 8px 0;
            }

            .theme {
                width: 56px;
                height: 56px;
                border-radius: 50%;
                border-width: 2px;
                border-color: transparent;
            }

            .theme.blue {
                background: {{ g.color.blue.primary }};
            }
            .theme.lightBlue {
                background: {{ g.color.lightBlue.primary }};
            }
            .theme.indigo {
                background: {{ g.color.indigo.primary }};
            }
            .theme.green {
                background: {{ g.color.green.primary }};
            }
            .theme.lightGreen {
                background: {{ g.color.lightGreen.primary }};
            }
            .theme.lime {
                background: {{ g.color.lime.primary }};
            }
            .theme.red {
                background: {{ g.color.red.primary }};
            }
            .theme.pink {
                background: {{ g.color.pink.primary }};
            }
            .theme.purple {
                background: {{ g.color.purple.primary }};
            }
            .theme.amber {
                background: {{ g.color.amber.primary }};
            }
            .theme.deepOrange {
                background: {{ g.color.deepOrange.primary }};
            }
            .theme.grey {
                background: {{ g.color.grey.primary }};
            }
        </style>
        <div layout vertical flex start>
            <paper-dropdown id="dropdown" selected="{{ selectedTab }}">
                <paper-item name="general" label="General"></paper-item>
                <paper-item name="add-feed" label="Add Feed"></paper-item>
                <paper-item name="feeds" label="Manage Feeds"></paper-item>
                <template if="{{ user.admin }}">
                    <paper-item name="admin" label="Admin"></paper-item>
                </template>
            </paper-dropdown>
            <core-animated-pages id="pages" class="{{ {wide: wide} | tokenList }}" selected="{{ selectedTab }}" transitions="hero-transition">

                <section name="general" layout vertical center>
                    <div class="container" slide-from-left>
                        <div class="card" hero-id="card" hero layout vertical>
                            <p>
                                Personalize your feed reader
                            </p>
                            <paper-input label="First name" id="first-name" value="{{ user.firstName }}" floatingLabel tabindex="1"></paper-input>
                            <paper-input label="Last name" id="last-name" value="{{ user.lastName }}" floatingLabel tabindex="2"></paper-input>
                            <paper-input label="Email" id="email" type="email" value="{{ user.email }}" floatingLabel tabindex="3"></paper-input>
                            <p>
                                Pick your style
                            </p>
                            <div class="theme-bubbles" layout horizontal justified>
                                <template repeat="{{ color in ['blue', 'lightBlue', 'indigo', 'green'] }}">
                                    <paper-icon-button class="theme {{ color }}" on-tap="{{ onThemeSelect }}"></paper-icon-button>
                                </template>
                            </div>
                            <div class="theme-bubbles" layout horizontal justified>
                                <template repeat="{{ color in ['lightGreen', 'lime', 'red', 'pink'] }}">
                                    <paper-icon-button class="theme {{ color }}" on-tap="{{ onThemeSelect }}"></paper-icon-button>
                                </template>
                            </div>
                            <div class="theme-bubbles" layout horizontal justified>
                                <template repeat="{{ color in ['purple', 'amber', 'deepOrange', 'grey'] }}">
                                    <paper-icon-button class="theme {{ color }}" on-tap="{{ onThemeSelect }}"></paper-icon-button>
                                </template>
                            </div>

                            <paper-button label="Change password" on-tap="{{ onChangePassword }}" self-end></paper-button>

                            <paper-dialog id="set-password-dialog" heading="Change your password" transition="paper-dialog-transition-bottom" closeSelector="[dismissive],[affirmative]:not([transient])" on-core-overlay-open="{{ cleanFields }}" on-keypress="{{ onPasswordDialogKeypress }}">
                                <small>A successfull change will force a re-log</small>
                                <paper-input label="Current password" id="password" type="password" floatingLabel tabindex="4"></paper-input>
                                <paper-input label="New password" id="new-password" type="password" floatingLabel tabindex="4"></paper-input>
                                <paper-input label="Confirm new password" id="confirm-new-password" type="password" floatingLabel tabindex="5"></paper-input>

                                <paper-button label="Cancel" affirmative></paper-button>
                                <paper-button label="Apply" id="apply-password-change" on-tap="{{ onApplyPasswordChange }}" affirmative autofocus transient></paper-button>
                            </paper-dialog>
                        </div>
                    </div>
                </section>

                <section name="add-feed" layout vertical center>
                    <div class="container" slide-from-left>
                        <div class="card" hero-id="card" hero layout vertical>
                            <template if="{{ !discoveredFeeds }}">
                                <p>
                                    Enter the address of a feed, or a website that might contain one or more feeds.
                                </p>

                                <paper-input label="URL" id="feed-url" value="{{ url }}" on-keypress="{{ onAddFeedUrlKeypress }}" floatingLabel tabindex="1"></paper-input>

                                <p>
                                    Alternatively, you may provide an OPML file that contains a list of feeds.
                                </p>

                                <input type="file" id="opml" name="opml" accept=".opml" tabindex="2">
                            </template>
                            <template if="{{ discoveredFeeds && !discoveredFeeds.length }}">
                                <p>No feeds found for '{{url}}'</p>
                            </template>
                            <template if="{{ discoveredFeeds && discoveredFeeds.length }}">
                                <p>Found the following feeds for '{{url}}':</p>
                                <ul>
                                <template repeat="{{ feed in discoveredFeeds }}">
                                    <li>
                                        <paper-checkbox checked="{{ feed.selected }}"></paper-checkbox>
                                        <a href="{{ feed.Link }}">{{ feed.Title }}: {{ feed.Description}}</a>
                                    </li>
                                </template>
                                </ul>
                            </template>
                            <template if="{{ loading }}">
                                <loading-wave self-center></loading-wave>
                            </template>

                            <div layout horizontal end-justified>
                                <paper-button label="Find" on-tap="{{ onFindFeed }}" id="find-feeds" autofocus hidden?="{{ discoveredFeeds }}"></paper-button>
                                <paper-button label="Add" on-tap="{{ onAddFeed }}" id="add-feeds" autofocus hidden?="{{ !discoveredFeeds || !discoveredFeeds.length }}"></paper-button>
                            </div>
                        </div>
                    </div>
                </section>

                <section name="feeds" layout vertical center>
                    <div class="container" slide-from-left>
                        <div class="card" hero-id="card" hero layout vertical>
                            <ul cross-fade>
                                <template repeat="{{ feed in feeds }}">
                                <li title="{{ feed.Title }}" layout horizontal>
                                    <span layout vertical center-justified>
                                        <img src="http://www.google.com/s2/favicons?domain={{ feed.Link | domain }}" alt="favicon" class="feed-favicon">
                                    </span>
                                    <span flex>{{ feed.Title }}</span>
                                    <paper-icon-button icon="remove" on-tap="{{ onRemoveFeed }}" data-feed-id="{{ feed.Id }}"></paper-icon-button>
                                </li>
                                </template>
                            </ul>
                        </div>
                    </div>
                </section>

                <template if="{{ user.admin }}">
                    <section name="admin" layout vertical center>
                        <div class="container" slide-from-left>
                            <div class="card" hero-id="card" hero>Admin</div>
                        </div>
                    </section>
                </template>

            </core-animated-pages>
        </div>

        <rf-api user="{{ user }}" id="remove-feed" method="post" pathAction="feed/remove/{{ removedFeed }}" on-rf-api-response="{{ onRemoveFeedResponse }}"></rf-api>

        <rf-api user="{{ user }}" id="discover-feed" pathAction="feed/discover" on-rf-api-response="{{ onDiscoverFeedResponse }}"></rf-api>
        <rf-api user="{{ user }}" id="discover-opml" pathAction="feed/opml" method="post" on-rf-api-response="{{ onDiscoverFeedResponse }}"></rf-api>
        <rf-api user="{{ user }}" id="add-feed" method="post" pathAction="feed/add" on-rf-api-response="{{ onAddFeedResponse }}"></rf-api>
        <rf-api id="password-change" pathAction="user/password" on-rf-api-response="{{ onPasswordChangeResponse }}" user="{{ user }}" method="post"></rf-api>
        
    </template>
    <script>
(function() {
    "use strict";

    var urlParser = document.createElement('a');

    Polymer('rf-settings', {
        selectedTab: 'general',
        loading: false,
        removedFeed: null,

        g: CoreStyle.g,

        attached: function() {
            this.cleanFields();
        },

        displayChanged: function(oldValue, newValue) {
            if (newValue != 'settings') {
                this.cleanFields();
            }
        },

        domain: function(value) {
            urlParser.href = value;

            return urlParser.host;
        },

        onAddFeedUrlKeypress: function(event, detail, sender) {
            var code = event.keyCode || event.charCode, key = event.keyIdentifier;

            if (key == 'Enter' || code == 13) {
                sender.blur();

                if (!this.url) {
                    this.$['feed-url'].required = true;
                    return;
                }

                this.$['find-feeds'].asyncFire('tap');
            }
        },

        onFindFeed: function() {
            if (this.$.opml.files.length) {
                var file = this.$.opml.files[0], fileReader = new FileReader();

                fileReader.onload = function(event) {
                    var contents = event.target.result;

                    this.$['discover-opml'].body = contents;
                    this.$['discover-opml'].contentType = file.type;

                    this.$['discover-opml'].go();
                }.bind(this);

                fileReader.readAsText(file);
            } else {
                if (!this.url) {
                    return;
                }

                this.$['discover-feed'].params = JSON.stringify({"url": this.url});
                this.$['discover-feed'].go();
            }
            this.loading = true;
        },

        onAddFeed: function() {
            var params = {url: []};
            for (var i = 0, f; f = this.discoveredFeeds[i]; ++i) {
                if (f.selected) {
                    params.url.push(f.Link);
                }
            }

            if (!params.url.length) {
                /* TODO: show that nothing was selected */
                return;
            }

            this.$['add-feed'].params = JSON.stringify(params)
            this.$['add-feed'].go();
            this.loading = true;
        },

        onDiscoverFeedResponse: function(event, data) {
            if (data.response) {
                if (data.response.Feeds) {
                    data.response.Feeds.forEach(function(f) {
                        f.selected = true;
                    });
                }
                this.discoveredFeeds = data.response.Feeds;
            } else {
                this.discoveredFeeds = [];
            }
            this.loading = false;
        },

        onAddFeedResponse: function(event, data) {
            if (data.response && data.response.Success) {
                this.fire('core-signal', {name: 'rf-feeds-added'});
            }

            this.cleanFields();
        },

        onRemoveFeed: function(event, detail, sender) {
            this.removedFeed = sender.getAttribute("data-feed-id");
            this.$['remove-feed'].go();
        },

        onRemoveFeedResponse: function(event, data) {
            if (data.response && data.response.Success) {
                this.fire('core-signal', {name: 'rf-feeds-removed'});
            }
        },

        onChangePassword: function() {
            this.$['set-password-dialog'].toggle();
        },

        onApplyPasswordChange: function() {
            ["password", "new-password", "confirm-new-password"].forEach(function(id) {
                if (!this.$[id].value) {
                    this.$[id].required = true;
                    this.$[id].value = null;
                }
            }.bind(this));

            if (this.$["new-password"].value != this.$["confirm-new-password"].value) {
                this.$["confirm-new-password"].invalid = true;
                this.$["confirm-new-password"].error = "Make sure the new password fields match.";
            }

            this.$['password-change'].body = JSON.stringify({
                "Current": this.$.password.value,
                "New": this.$["new-password"].value
            });
            this.$['password-change'].go();
        },

        onPasswordChangeResponse: function(event, data) {
            if (data.response && data.response.Success) {
                this.user = null;
            }
        },

        onPasswordDialogKeypress: function(event) {
            var code = event.keyCode || event.charCode, key = event.keyIdentifier;

            if (key == 'Enter' || code == 13) {
                if (event.target === this.$.password) { 
                    this.$["new-password"].focusAction();
                } else if (event.target === this.$["new-password"]) {
                    this.$["confirm-new-password"].focusAction();
                } else if (event.target === this.$["confirm-new-password"]) {
                    this.$["apply-password-change"].asyncFire('tap');
                }
            }
        },

        onThemeSelect: function(event, detail, sender) {
            var theme = sender.className.replace(/^theme /, '');

            this.settings.theme = theme;
        },

        cleanFields: function() {
            this.url = "";
            this.discoveredFeeds = null;
            this.loading = false;

            ["password", "new-password", "confirm-new-password"].forEach(function(id) {
                this.$[id].required = false;
                this.$[id].invalid = false;
                this.$[id].value = "";
                this.$[id].error = "";
            }.bind(this));
        }
    });
})();
    </script>
</polymer-element>
{% end %}
