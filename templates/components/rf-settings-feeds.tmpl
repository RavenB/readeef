{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-checkbox/paper-checkbox.html">
<link rel="import" href="/dist/paper-input/paper-input.html">
<link rel="import" href="/dist/paper-spinner/paper-spinner.html">

<dom-module id="rf-settings-feeds">
    <template>
        <div class="card" class="layout vertical start" style="max-width: 400px;">
            <div class="layout vertical" hidden$="{{ discoveredFeeds }}">
                <p>
                    Enter the address of a feed, or a website that might contain one or more feeds.
                </p>

                <paper-input id="feed-url" label="URL"></paper-input>

                <p>
                    Alternatively, you may provide an OPML file that contains a list of feeds.
                </p>

                <paper-input type="file" id="opml" name="opml" accept=".opml" tabindex="2"></paper-input>
            </div>

            <div class="layout vertical" hidden$="{{ _computeHideFindEmptyResult(discoveredFeeds) }}">
                <p>No feeds found</p>
            </div>
            <div class="layout vertical" hidden$="{{ _computeHideFindResult(discoveredFeeds, noSelectedFeedsError, addFeedError) }}">
                <p>Found the following feeds:</p>
                <ul>
                <template is="dom-repeat" items="{{ discoveredFeeds }}">
                    <li class="layout horizontal center">
                        <paper-checkbox checked="{{ item.selected }}"></paper-checkbox>
                        <a href="{{ item.Link }}">{{ item.Title }}<br><small>{{ item.Description}}</small></a>
                    </li>
                </template>
                </ul>
            </div>
            <div class="layout vertical" hidden$="{{ !noSelectedFeedsError }}">
                <p>No feeds were selected</p>
            </div>
            <div class="layout vertical" hidden$="{{ !addFeedError }}">
                <p>Error adding selected feeds: <span>{{ addFeedError }}</span></p>
            </div>

            <div class="layout horizontal end-justified">
                <paper-spinner active="{{ loading }}"></paper-spinner>
                <paper-button id="find-feeds" on-tap="onFindFeed" autofocus hidden$="{{ _computeHideFindFeeds(discoveredFeeds, loading) }}">Find</paper-button>
            </div>
        </div>

        <rf-api user="{{ user }}" id="discover-feeds" method="discover-feeds" on-rf-api-message="onDiscoverFeedsMessage" on-rf-api-error="onDiscoverFeedsError"></rf-api>
        <rf-api user="{{ user }}" id="parse-opml" method="parse-opml" on-rf-api-message="onDiscoverFeedsMessage" on-rf-api-error="onDiscoverFeedsError"></rf-api>
    </template>

    <script>
        "use strict";
        Polymer({
            is: "rf-settings-feeds",
            properties: {
                discoveredFeeds: {
                    type: Array,
                    value: null
                },
                noSelectedFeedsError: {
                    type: Boolean,
                    value: false
                },
                addFeedError: {
                    type: String,
                    value: ""
                },
                loading: {
                    type: Boolean,
                    value: false
                }
            },

            onFindFeed: function() {
                if (this.$.opml.$.input.files.length) {
                    var file = this.$.opml.$.input.files[0], fileReader = new FileReader();

                    fileReader.onload = function(event) {
                        var contents = event.target.result;

                        this.$['parse-opml'].send({opml: contents});
                    }.bind(this);

                    fileReader.readAsText(file);
                } else {
                    var url = this.$['feed-url'].value;
                    if (!url) {
                        this.$['feed-url'].required = true;
                        this.$['feed-url'].invalid = true;
                        return;
                    }

                    if (window.google && google.feeds && !/https?:\/\//.test(url)) {
                        google.feeds.findFeeds(url, function(response) {
                            if (response.status.code == 200) {
                                if (response.entries.length) {
                                    var feeds = [], urls = {};

                                    for (var i = 0, e; e = response.entries[i]; ++i) {
                                        if (!urls[e.url]) {
                                            feeds.push({
                                                Link: e.url,
                                                Title: this._stripTags(e.title),
                                                Description: this._stripTags(e.contentSnippet)
                                            });
                                            urls[e.url] = true;
                                        }
                                    }

                                    feeds[0].selected = true;
                                    this.onDiscoverFeedsMessage(null, {success: true, arguments: {Feeds: feeds, SkipSelection: true}});
                                } else {
                                    this.onDiscoverFeedsError();
                                }
                            } else {
                                this.onDiscoverFeedsError();
                            }
                        }.bind(this));
                    } else {
                        this.$['discover-feeds'].send({link: url});
                    }
                }
                this.loading = true;
            },

            onDiscoverFeedsMessage: function(event, data) {
                if (!data.arguments.SkipSelection) {
                    data.arguments.Feeds.forEach(function(f) {
                        f.selected = true;
                    });
                }
                this.discoveredFeeds = data.arguments.Feeds;
                this.loading = false;
            },

            onDiscoverFeedsError: function(event, data) {
                this.$['feed-url'].errorMessage = this.$['feed-url'].getAttribute("data-" + data.arguments.ErrorType);
                this.$['feed-url'].invalid = true;
                this.loading = false;
            },

            _computeHideFindEmptyResult(discoveredFeeds) {
                return !discoveredFeeds || discoveredFeeds.length > 0
            },

            _computeHideFindResult(discoveredFeeds, noSelectedFeedsError, addFeedError) {
                return !discoveredFeeds || !discoveredFeeds.length > 0 || !!addFeedError || !!noSelectedFeedsError
            },

            _computeHideFindFeeds(discoveredFeeds, loading) {
                return !!discoveredFeeds || loading
            },

            _stripTags: function(html) {
                var div = document.createElement("div");
                div.innerHTML = html;

                return div.textContent || "";
            },
        })
    </script>
</dom-module>
{% end %}
