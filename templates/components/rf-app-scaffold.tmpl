{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/paper-drawer-panel/paper-drawer-panel.html">
<link rel="import" href="/dist/paper-header-panel/paper-header-panel.html">
<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">
<link rel="import" href="/dist/paper-toolbar/paper-toolbar.html">

<dom-module id="rf-app-scaffold">
    <style>
paper-toolbar {
    font-size: 24px;
}

.card {
    @apply(--card-style);
}

.content {
    padding: 8px 16px 16px;
    min-height: 5em;
    margin: 10px 120px 60px 5px;
    background-color: #f8f8f8 !important;
}

.narrow.content {
    padding-top: 16px;
    margin: 0px 0px 60px 0px;
}

[drawer] .menu-container {
    padding: 8px 0;

    @apply(--layout-vertical);
}

[drawer] .menu-container > ::content .item {
    position: relative;
    padding: 16px;
    border-radius: 3px;
}

[drawer] .menu-container > ::content hr {
    background-color: var(--text-primary-color);
    border-style: ridge;
    width: 100%;
    margin: 2px 16px;
}
paper-header-panel[main] /deep/ .main-title-container {
    font-size: 24px;
}

    </style>

    <template>
        <paper-drawer-panel id="drawer" on-paper-responsive-change="onResponsiveChange" class$="[[_computeDrawerClass(narrow)]]" responsive-width="768px">
            <paper-header-panel drawer mode="[[_computeDrawerPanelMode(narrow)]]">
                <paper-toolbar>
                    <content select=".drawer-title"></content>
                </paper-toolbar>
                <div class="menu-container">
                    <content select=".drawer-menu"></content>
                </div>
            </paper-header-panel>
            <paper-header-panel main mode="[[_computeMainPanelMode(narrow)]]">
                <paper-toolbar>
                    <div class="main-narrow-title-container flex" hidden$="{{ !narrow }}">
                    </div>
                </paper-toolbar>
                <div class$="[[_computeContentClass(narrow)]]">
                    <div class="main-title-container" hidden$="{{ narrow }}">
                        <content select=".main-title"></content>
                    </div>
                    <content select=".main-content"></content>
                </div>
            </paper-header-panel>
        </paper-drawer-panel>
    </template>
    <script>
        "use strict";
        Polymer({
            is: "rf-app-scaffold",
            behaviors: [
                Polymer.Templatizer
            ],
            properties: {
                narrow: {
                    type: Boolean,
                    readOnly: true,
                    notify: true,
                    reflectToAttribute: true,
                }
            },
            _titleInstances: [],

            attached: function() {
                this._insertTitle();
            },

            onResponsiveChange: function(event, detail) {
                this._setNarrow(detail.narrow);
            },

            _computeDrawerClass: function(narrow) {
                return narrow ? 'narrow' : '';
            },

            _computeContentClass: function(narrow) {
                return narrow ? 'content narrow' : 'content card';
            },

            _computeDrawerPanelMode: function(narrow) {
                return narrow ? 'standard' : 'seamed';
            },

            _computeMainPanelMode: function(narrow) {
                return narrow ? 'standard' : 'cover';
            },

            _ensureTemplatized: function() {
                if (!this.ctor) {
                    this._userTemplate = Polymer.dom(this).querySelector('.main-title template');
                    if (this._userTemplate) {
                        this.templatize(this._userTemplate);
                    }
                }
            },
 
            _insertTitle: function() {
                this._ensureTemplatized();

                var el = Polymer.dom(this.root);

                ['.main-narrow-title-container', '.main-title-container'].forEach(function(cls) {
                    var container = el.querySelector(cls),
                        inst = this.stamp(null);

                    this._titleInstances.push(inst.root.querySelector('*'));
                    container.innerHTML = "";
                    container.appendChild(inst.root);

                    for (var prop in inst._parentProps) {
                        inst[prop] = this[prop];
                    }
                }.bind(this));

                el.flush();
            },

            _forwardParentProp: function(prop, value) {
                this._titleInstances.forEach(function(inst) {
                    inst._templateInstance[prop] = value;
                }.bind(this));
            },

            _forwardParentPath: function(path, value) {
                this._titleInstances.forEach(function(inst) {
                    inst._templateInstance.notifyPath(path, value, true);
                }, this);
            }

        })
    </script>
</dom-module>
{% end %}
