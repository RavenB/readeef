{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">

<link rel="import" href="/dist/paper-item/paper-item.html">

<link rel="import" href="/dist/core-localstorage/core-localstorage.html">
<link rel="import" href="/dist/core-overlay/core-overlay.html">
<link rel="import" href="/dist/core-animated-pages/core-animated-pages.html">
<link rel="import" href="/dist/core-animated-pages/transitions/slide-up.html">
<link rel="import" href="/dist/core-animated-pages/transitions/scale-up.html">
<link rel="import" href="/dist/core-animated-pages/transitions/tile-cascade.html">
<link rel="import" href="/dist/core-transition/core-transition-css.html">

<link rel="import" href="/component/rf-api">
<link rel="import" href="/component/rf-scaffolding">
<link rel="import" href="/component/rf-login">
<link rel="import" href="/component/rf-dialog-add-feed">

<polymer-element name="rf-app" vertical layout attributes="{{ user userTTL }}">
    <template>
        <style>
            .drawer-title.bottom {
                padding: 20px 0 20px 60px;
                margin: 0;
                width: auto;
                color: white;
                font-weight: 400;
                font-size: 18px;
            }

            .wide .drawer-title.bottom {
                padding-top: 25px;
                font-size: 24px;
            }

            .drawer-content {
                padding-left: 50px;
            }

        </style>
        <core-animated-pages selected="{{ selected }}" transitions="cross-fade cross-fade-delayed scale-up slide-up slide-up-offscreen slide-down tile-cascade hero-transition" fit class="{{ {wide: wide} | tokenList }}">
            <core-overlay name="loading" opened?="{{ selected == 'loading' }}" style="background-color: #e2e2e2;" transition="core-transition-top">
            </core-overlay>

            <rf-scaffolding name="scaffolding" cross-fade wide="{{ wide }}" user="{{ user }}" contenttitle="Feed Title">
                <div fit class="drawer-title bottom">Feeds</div>

                <paper-item label="Add feed" class="drawer-content" on-tap="{{ onAddFeed }}"></paper-item>
                <hr class="drawer-content">
                <template if="{{ feeds.length > 1 }}">
                    <paper-item label="All" class="drawer-content" on-tap="{{ onFeedTap }}" feed-id="__all__" selectable></paper-item>
                </template>
                <template repeat="{{ feed in feeds }}">
                    <paper-item label="{{ feed.Title }}" class="drawer-content" on-tap="{{ onFeedTap }}" title="{{ feed.Description }}" feed-id="{{ feed.Id }}" selectable></paper-item>
                </template>
                <hr class="drawer-content">
                <paper-item label="Settings" class="drawer-content"></paper-item>
                <paper-item label="Sign Out" class="drawer-content" on-tap="{{ onSignOut }}"></paper-item>

                <div class="main-content">
                    <p>Content be here!</p>
                </div>
            </rf-scaffolding>

            <rf-login name="login" id="login" layout wide="{{ wide }}" user="{{ user }}"></rf-login>
        </core-animated-pages>

        <rf-api id="auth-check" pathAction="auth" on-core-complete="{{ onAuthCheckComplete }}" user="{{ user }}"></rf-api>
        <rf-api id="all-feeds" pathAction="feed/all" on-core-response="{{ onAllFeedsResponse }}" user="{{ user }}"></rf-api>

        <core-localstorage name="user" id="user-storage" value="{{user}}" on-core-localstorage-load="{{ onUserLoad }}"></core-localstorage>
        <core-media-query query="min-width: {{responsiveWidth}}" queryMatches="{{wide}}"></core-media-query>

        <rf-dialog-add-feed id="add-feed-dialog" wide="{{ wide }}" user="{{ user }}" on-feeds-added="{{ onFeedsAdded }}"></rf-dialog-add-feed>
    </template>
    <script>
(function() {
    "use strict";

    Polymer('rf-app', {
        selected: 'loading',
        responsiveWidth: '768px',
        userTTL: 1000 * 60 * 60 * 24 * 15,
        user: null,

        created: function() {
            this.feeds = [];
        },

        userChanged: function(oldValue, newValue) {
            this.async(function() {
                if (!newValue) {
                    this.selected = 'login';
                } else {
                    if ((!oldValue && newValue) || (oldValue && !newValue)
                            || oldValue.login != newValue.login
                            || oldValue.md5api != newValue.md5api) {
                        this.$['auth-check'].go();
                    }
                }
            })
        },

        onAuthCheckComplete: function(event, response) {
            if (response.response == 403) {
                if (this.selected == 'login') {
                    this.$.login.invalid = true;
                } else {
                    this.selected = 'login';
                }
            } else if (response.response == 200) {
                this.user.authTime = new Date().getTime();

                if (this.selected == 'login' || this.selected == 'loading') {
                    this.selected = 'scaffolding';
                }

                this.$['user-storage'].save();

                this.$['all-feeds'].go();
            }
        },

        onUserLoad: function(event, detail, sender) {
            if (sender.value) {
                if (!sender.value.authTime || new Date().getTime() - this.user.authTime > this.userTTL) {
                    sender.value = null;
                }
            }

            if (!sender.value) {
                this.selected = 'login';
            }
        },

        onSignOut: function() {
            this.user = null;
        },

        onAddFeed: function() {
            this.$['add-feed-dialog'].toggle();
        },

        onFeedsAdded: function() {
            this.$['all-feeds'].go();
        },

        onAllFeedsResponse: function(event, data) {
            if (data.response) {
                this.feeds = data.response.Feeds;
            }
        },

        onFeedTap: function(event) {
            console.log(event.target);
        }
    });
})();
    </script>
</polymer-element>
{% end %}
