{% define "content" %}
<link rel="import" href="/dist/paper-button/paper-button.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog-transition.html">
<link rel="import" href="/dist/paper-dialog/paper-dialog.html">
<link rel="import" href="/dist/paper-input/paper-input.html">
<link rel="import" href="/dist/paper-checkbox/paper-checkbox.html">

<link rel="import" href="/component/rf-api">

<polymer-element name="rf-dialog-add-feed" attributes="wide user">
    <template>
        <style>
        ul {
            padding: 0;
        }

        li {
            list-style: none;
        }
        paper-checkbox {
            margin-right: 10px;
        }
        </style>
        <paper-dialog id="add-feed-dialog" heading="Add feed" transition="paper-dialog-transition-center" backdrop on-core-overlay-open="{{ onOpen }}" closeSelector="[dismissive],[affirmative]:not([transient])">
            <template if="{{ !feeds }}">
                <p>Enter the address of a feed, or a website that might contain one or more feeds.</p>

                <paper-input label="URL" id="feed-url" value="{{ url }}" on-keypress="{{ onUrlKeypress }}"></paper-input>
            </template>
            <template if="{{ feeds && !feeds.length }}">
                <p>No feeds found for '{{url}}'</p>
            </template>
            <template if="{{ feeds && feeds.length }}">
                <p>Found the following feeds for '{{url}}':</p>
                <ul>
                <template repeat="{{feed in feeds}}">
                    <li>
                        <paper-checkbox checked="{{ feed.selected }}"></paper-checkbox>
                        <a href="{{ feed.Link }}">{{ feed.Title }}: {{ feed.Description}}</a>
                    </li>
                </template>
                </ul>
            </template>
            <template if="{{ loading }}">
                <p>Loading&hellip;</p>
            </template>

            <paper-button label="Cancel" affirmative></paper-button>
            <paper-button label="Find" on-tap="{{ onFind }}" id="find-feeds" affirmative transient autofocus hidden?="{{ feeds }}"></paper-button>
            <paper-button label="Add" on-tap="{{ onAdd }}" id="add-feeds" affirmative transient autofocus hidden?="{{ !feeds || !feeds.length }}"></paper-button>
        </paper-dialog>

        <rf-api user="{{ user }}" id="discover" pathAction="feed/discover" on-core-response="{{ onDiscoverResponse }}"></rf-api>
        <rf-api user="{{ user }}" id="add" pathAction="feed/add" on-core-response="{{ onAddResponse }}"></rf-api>
    </template>
    <script>
(function() {
    "use strict";

    Polymer('rf-dialog-add-feed', {
        loading: false,

        created: function() {
            this.feeds = null;
        },

        toggle: function() {
            this.$['add-feed-dialog'].toggle();
        },

        onOpen: function() {
            this.url = "";
            this.feeds = null;
            this.loading = false;
        },

        onUrlKeypress: function(event, detail, sender) {
            var code = event.keyCode || event.charCode, key = event.keyIdentifier;

            if (key == 'Enter' || code == 13) {
                sender.blur();

                if (!this.url) {
                    return;
                }

                this.$['find-feeds'].asyncFire('tap');
            }
        },

        onFind: function() {
            if (!this.url) {
                this.toggle();
                return;
            }

            this.$.discover.params = JSON.stringify({"url": this.url});
            this.$.discover.go();
            this.loading = true;
        },

        onAdd: function() {
            var params = {url: []};
            for (var i = 0, f; f = this.feeds[i]; ++i) {
                if (f.selected) {
                    params.url.push(f.Link);
                }
            }

            if (!params.url.length) {
                this.toggle();
                return;
            }

            this.$.add.params = JSON.stringify(params)
            this.$.add.go();
            this.loading = true;
        },

        onDiscoverResponse: function(event, data) {
            if (data.response) {
                data.response.Feeds.forEach(function(f) {
                    f.selected = true;
                });
                this.feeds = data.response.Feeds;
            } else {
                this.feeds = [];
            }
            this.loading = false;
        },

        onAddResponse: function(event, data) {
            if (data.response && data.response.Success) {
            }

            this.loading = false;
            this.toggle();
        }
    });
})();
    </script>
</polymer-element>
{% end %}
