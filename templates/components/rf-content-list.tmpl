{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/core-list/core-list.html">
<link rel="import" href="/dist/core-animated-pages/core-animated-pages.html">
<link rel="import" href="/dist/core-signals/core-signals.html">

<link rel="import" href="/dist/paper-icon-button/paper-icon-button.html">

<link rel="import" href="/component/rf-api">

<polymer-element name="rf-content-list" attributes="wide user feed feeds article">
    <template bind="{{ wide as wide }}">
        <style>
            core-list {
                padding-top: 8px;
                overflow: hidden;
            }

            core-animated-pages > section[active] {
                position: relative;
            }

            .card {
                background-color: #fff;
                box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.16);
                border-radius: 3px;
                margin: 0 8px 8px;
                padding: 8px;
            }
            .article {
                height: {{ itemHeight }}px;
                cursor: pointer;
            }

            .article.read {
                opacity: 0.6;
                color: #555;
            }

            .article .title-wrapper {
                white-space: nowrap;
                text-overflow: ellipsis;
                overflow: hidden;
            }

            .title {
                font-size: 16px;
                line-height: 24px;
            }

            .article-detail .title {
                font-size: 20px;
                font-weight: bold;
            }

            .short-description {
                font-size: 12px;
                line-height: 24px;
                padding-left: 1em;
                font-weight: 200;
            }

            .publish-date {
                font-size: 14px;
                line-height: 24px;
                padding-left: 0.7em;
            }

            .feed-origin {
                font-size: 10px;
                line-height: 24px;
                font-weight: 200;
                padding-right: 1em;
                width: 80px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .article-content {
                padding: 16px 94px;
                max-width: 800px;
                margin: 0 auto;
            }
            .article-detail .title-wrapper {
                max-width: 820px;
                margin: 0 auto;
            }

            core-animated-pages:not(.wide) .article-content {
                padding: 8px;
            }
            .article-link {
                padding-top: 16px;
            }

            .article-description img, 
            .article-description object, 
            .article-description iframe {
                max-width: 100%;
                height: auto;
            }

            .favorite-button {
                margin-top: -2px;
            }

            .favorite-button /deep/ #icon {
                margin: 5px;
                width: 18px;
                height: 18px;
            }

            core-animated-pages:not(.wide) .article .publish-date,
            core-animated-pages:not(.wide) .article .feed-origin {
                display: none;
            }
        </style>
        <core-animated-pages id="pages" class="{{ {wide: wide} | tokenList }}" selected="list" transitions="hero-transition" on-core-animated-pages-transition-end="{{ onPagesTransitionEnd }}">

            <section name="list">
                <core-list data="{{ articles }}" height="{{ itemHeight }}" id="articles-list" on-core-activate="{{ onArticleActivate }}">
                    <template>
                        <div class="article {{ {selected: selected, read: Read, favorite: Favorite} | tokenList }}" id="{{ Id }}">
                            <div class="card" layout vertical hero-id="article-card-{{ Id }}" hero?="{{ selected }}">
                                <div layout horizontal>
                                    <paper-icon-button class="favorite-button" icon="{{ {'bookmark-outline': !Favorite, bookmark: Favorite} | tokenList }}" on-tap="{{ onFavoriteToggle }}" data-article-id="{{ Id }}" data-feed-id="{{ FeedId }}"></paper-icon-button>
                                    <span class="feed-origin" title="{{ FeedOrigin }}" hidden?="{{ !FeedOrigin }}" hero-id="article-feed-origin-{{ Id }}" hero>{{ FeedOrigin }}</span>
                                    <span flex class="title-wrapper">
                                        <span class="title" title="{{ Title }}" hero-id="article-title-{{ Id }}" hero>{{ Title }}</span>
                                        <span class="short-description">{{ ShortDescription }}</span>
                                    </span>
                                    <span class="publish-date" hero-id="article-publish-date-{{ Id }}" hero>{{ RelativeDate }}</span>
                                </div>
                            </div>
                        </div>
                    </template>
                </core-list>
            </section>

            <section name="detail" hidden?="{{ !article }}">
                <div class="article-detail">
                    <div class="card" layout vertical hero-id="article-card-{{ article.Id }}" hero>
                        <div layout horizontal>
                            <paper-icon-button class="favorite-button" icon="{{ {'bookmark-outline': !article.Favorite, bookmark: article.Favorite} | tokenList }}" on-tap="{{ onFavoriteArticleToggle }}" data-article-id="{{ Id }}"></paper-icon-button>
                            <span class="feed-origin" title="{{ article.FeedOrigin }}" hidden?="{{ !wide || !article.FeedOrigin }}" style="float: left" hero-id="article-feed-origin-{{ article.Id }}" hero>{{ article.FeedOrigin }}</span>
                            <span flex class="title-wrapper" layout vertical>
                                <a href="{{ article.Link }}" target="feed-article">
                                    <span class="title" title="{{ article.Title }}" hero-id="article-title-{{ article.Id }}" hero>{{ article.Title }}</span>
                                </a>
                                <span layout horizontal hidden?="{{ wide }}">
                                    <span class="feed-origin" title="{{ article.FeedOrigin }}" hidden?="{{ !article.FeedOrigin }}" style="float: left" hero-id="article-feed-origin-{{ article.Id }}" hero>{{ article.FeedOrigin }}</span>
                                    <span class="publish-date" hero-id="article-publish-date-{{ article.Id }}" hero>{{ article.RelativeDate }}</span>
                                </span>
                            </span>
                            <span class="publish-date" hidden?="{{ !wide }}" hero-id="article-publish-date-{{ article.Id }}" hero>{{article.RelativeDate}}</span>
                        </div>
                        <div class="article-content">
                            <div class="article-description"></div>

                            <a href="{{ article.Link }}" target="feed-article" class="article-link">View the article</a>
                        </div>
                    </div>
                </div>
            </section>

        </core-animated-pages>

        <rf-api id="article-read" method="post" pathAction="article/read/{{ article.FeedId }}/{{ article.Id }}/{{ article.Read }}" on-rf-api-response="{{ onArticleReadResponse }}" user="{{ user }}"></rf-api>
        <rf-api id="article-favorite" method="post" pathAction="article/favorite/{{ article.FeedId }}/{{ article.Id }}/{{ article.Favorite }}" on-rf-api-response="{{ onArticleFavoriteResponse }}" user="{{ user }}"></rf-api>

        <core-signals on-core-signal-rf-next-article="{{ nextArticle }}"></core-signals>
        <core-signals on-core-signal-rf-previous-article="{{ previousArticle }}"></core-signals>
    </template>
    <script>
(function() {
    "use strict";

    Polymer('rf-content-list', {
        itemHeight: 48,
        listHeight: 0,
        pathObserver: null,
        listPosition: 0,

        nextArticle: function() {
            if (this.article) {
                var index = this.articles.indexOf(this.article);

                if (index < this.articles.length - 1) {
                    this.article = this.articles[index + 1];
                }
            } else {
                this.article = this.articles[0];
            }
        },

        previousArticle: function() {
            if (this.article) {
                var index = this.articles.indexOf(this.article);

                if (index) {
                    this.article = this.articles[index - 1];
                }
            } else {
                this.article = this.articles[this.articles.length - 1];
            }
        },

        created: function() {
            this.articles = [];
        },

        domReady: function() {
            var contentPanel = document.querySelector('rf-app').$.scaffolding.$['content-panel'];

            this.$['articles-list'].scrollTarget = contentPanel;

            contentPanel.addEventListener('scroll', function(event) {
                if (!this.articles.length || this.$.pages.selected == "detail") {
                    return;
                }

                if (contentPanel.scroller.offsetHeight + contentPanel.scroller.scrollTop + 50 > contentPanel.scroller.scrollHeight) {
                    this.asyncFire('core-signal', {name: 'rf-request-articles'});
                }
            }.bind(this));
        },

        feedChanged: function(oldValue, newValue) {
            this.listHeight = 0;

            this.article = null;

            var processArticles = (function processArticles() {
                if (this.feed.Articles && this.feed.Articles.length) {
                    var worker = new Worker('/js/content-articles-worker.js'),
                        data = {current: this.feed};

                    worker.addEventListener('message', function(event) {
                        this.articles = event.data.articles;
                    }.bind(this));
                    if (this.feed.Id == "__all__") {
                        data.feeds = this.feeds;
                    }
                    worker.postMessage(data);
                } else if (this.articles.length) {
                    this.articles = [];
                }
            }).bind(this);

            if (newValue) {
                processArticles();

                if (this.pathObserver) {
                    this.pathObserver.close();
                }

                this.pathObserver = new PathObserver(newValue, 'Articles');
                this.pathObserver.open(function(newValue) {
                    processArticles();
                }.bind(this));
            }
        },

        articleChanged: function(oldValue, newValue) {
            var scroller = document.querySelector('rf-app').$.scaffolding.$['content-panel'].scroller;

            if (newValue) {
                if (!oldValue) {
                    this.listPosition = scroller.scrollTop;
                }

                this.$.pages.querySelector('.article-description').innerHTML = newValue.Description;

                this.$.pages.selected = 'detail';

                if (!newValue.Read) {
                    newValue.Read = true;
                    this.$['article-read'].go();
                }

                if (newValue.Last) {
                    this.asyncFire('core-signal', {name: 'rf-request-articles'});
                }
            } else {
                this.$.pages.selected = 'list';
                this.$['articles-list'].refresh(true);

                this.async(function() {
                    scroller.scrollTop = this.listPosition;
                });
            }
        },

        onArticleActivate: function(event, detail) {
            this.article = detail.data;
        },

        onPagesTransitionEnd: function(event) {
            document.querySelector('rf-app').$.scaffolding.$['content-panel'].scroller.scrollTop = 0;
        },

        onFavoriteToggle: function(event) {
            event.stopPropagation();
            event.preventDefault();

            var articleId = event.target.getAttribute('data-article-id');
            for (var i = 0, a; a = this.articles[i]; ++i) {
                if (a.Id == articleId) {
                    a.Favorite = !a.Favorite;

                    var clone = this.$['article-favorite'].cloneNode(true);
                    clone.pathAction = "article/favorite/" + a.FeedId + "/" + a.Id + "/" + a.Favorite;
                    clone.user = this.user;

                    clone.go()

                    this.$['articles-list'].refresh(true);

                    break;
                }
            }
        },

        onFavoriteArticleToggle: function() {
            this.article.Favorite = !this.article.Favorite;
            this.$['article-favorite'].go();
            this.$['articles-list'].refresh(true);
        }

    });
})();
    </script>
</polymer-element>
{% end %}
