{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">

<link rel="import" href="/component/rf-api">

<dom-module id="rf-article">
    <style>
.articles-container {
    position: relative;
    overflow: hidden;
}

.article {
    width: 100%;
    margin-top: 8px;
    display: none;
    position: absolute;
    top: 0;
}

#active-article {
    width: calc(100% - 16px);
    margin-left: 8px;
    margin-right: 8px;
    position: relative;
    display: block;
}

#previous-article {
    -webkit-transform: translate3d(-100%, 0px, 0px);
    transform: translate3d(-100%, 0px, 0px);
}

#next-article {
    -webkit-transform: translate3d(100%, 0px, 0px);
    transform: translate3d(100%, 0px, 0px);
}
    </style>
    <template>
        <div class="articles-container layout horizontal">
            <div class="article" id="previous-article"></div>
            <div class="article" id="active-article"></div>
            <div class="article" id="next-article"></div>
            <content></content>
        </div>
    </template>

    <script>
(function() {
    "use strict";

     function ordinal(value) {
        var str = value.toString(), suff = str.slice(-1), ord = '';

        switch (suff) {
        case '1':
            ord = str.slice(-2) == '11' ? 'th' : 'st';
            break;
        case '2':
            ord = str.slice(-2) == '12' ? 'th' : 'nd';
            break;
        case '3':
            ord = str.slice(-2) == '13' ? 'th' : 'rd';
            break;
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            ord = 'th';
            break;
        }
        return value + ord;
    }

    Polymer({
        is: "rf-article",
        behaviors: [
            Polymer.Templatizer
        ],
        properties: {
            user: Object,
            narrow: {
                type: Boolean,
                reflectToAttribute: true,
            },

            _article: {
                type: Object,
                observer: '_articleChanged',
            },
            _previous: Object,
            _next: Object,
            _articleIndex: Number,
        },

        created: function() {
            this._instances = new Array(3);
        },

        ready: function() {
            if (!this.ctor) {
                var template = Polymer.dom(this).querySelector('template');
                this.templatize(template);
            }
        },

        setArticles: function(article, previous, next, index) {
            if (article.Id == this._article && this._article.Id) {
                return;
            }

            var direction = 0;
            if (article.Id == this._previous && this._previous.Id) {
                direction = -1
            } else if (article.Id == this._next && this._next.Id) {
                direction = 1;
            }

            this._previous = previous;
            this._next = next;
            this._article = article;
            this._articleIndex = index;

            this._debounceTemplate(this._render);
        },

        _articleChanged: function(article, oldValue) {
            console.log(article);
        },

        _render: function() {
            if (this._previous) {
                this.$['previous-article'].innerHTML = '';

                var inst = this._generateArticle(this._previous, -1);
                this._instances[0] = inst;
                Polymer.dom(this.$['previous-article']).appendChild(inst.root);
            } else {
                this._instances[0] = null;
            }

            if (this._next) {
                this.$['next-article'].innerHTML = '';

                var inst = this._generateArticle(this._next, 1);
                this._instances[2] = inst;
                Polymer.dom(this.$['next-article']).appendChild(inst.root);
            } else {
                this._instances[2] = null;
            }

            this.$['active-article'].innerHTML = '';
            var inst = this._generateArticle(this._article, 0);
            this._instances[1] = inst;
            Polymer.dom(this.$['active-article']).appendChild(inst.root);

            Polymer.dom(this).flush();
        },

        _generateArticle: function(article, direction) {
            var index = this._articleIndex + direction;
            var model = {
                article: article,
                summarized: false,
                topImage: null,
                keyPoints: [],
                index: index,
                ordinalPosition: ordinal(index + 1),
            }

            var inst = this.stamp(null);
            inst.item = model;

            this._stylizeArticleDescription(inst, model);

            return inst;
        },

        _stylizeArticleDescription: function(inst, model) {
            if (model.summarized) {
                return;
            }

            var description = inst.root.querySelector('.article-description'),
                imageStyler = function() {
                    if (image.width < 300) {
                        (image.parentNode || description).classList.add('clearfix');
                        image.style.float = "right";
                    }
                }, image;

            description.innerHTML = model.formatted ? model.formattedDescription : model.article.Description;
            image = description.querySelector('img');

            if (image) {
                if (image.complete) {
                    imageStyler();
                } else {
                    image.addEventListener('load', imageStyler);
                }
            }

            Array.prototype.forEach.call(
                description.querySelectorAll('img'),
                function(element) {
                    element.style.width = 'auto';
                    element.style.height = 'auto';
                }
            );

            Polymer.dom.flush();
        },

        _forwardParentProp: function(prop, value) {
            this._instances.forEach(function(inst) {
                if (inst) {
                    inst._templateInstance[prop] = value;
                }
            }.bind(this));
        },

        _forwardParentPath: function(path, value) {
            this._titleInstances.forEach(function(inst) {
                if (inst) {
                    inst._templateInstance.notifyPath(path, value, true);
                }
            }, this);
        },

    })
})()
    </script>
</dom-module>
{% end %}
