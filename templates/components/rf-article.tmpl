{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/neon-animation/web-animations.html">

<link rel="import" href="/component/rf-api">

<dom-module id="rf-article">
    <style>
#article-container {
    position: relative;
    overflow: hidden;

    -webkit-transition: height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transition: height 0.3s cubic-bezier(0.4, 0, 0.2, 1);

}

.article {
    width: calc(100% - 16px);
    position: absolute;
    top: 0;
    left: 0;
    margin-top: 8px;
    margin-left: 8px;
    margin-right: 8px;
    z-index: 1;
}

.article.height-provider {
    position: relative;
}

.active-article {
    z-index: 0;
}

.previous-article {
    -webkit-transform: translate3d(-105%, 0px, 0px);
    transform: translate3d(-105%, 0px, 0px);
}

.next-article {
    -webkit-transform: translate3d(105%, 0px, 0px);
    transform: translate3d(105%, 0px, 0px);
}

.active-article.from-top,
.previous-article.from-top,
.next-article.from-top {
    -webkit-transform: translate3d(0px, -105%, 0px);
    transform: translate3d(0px, -105%, 0px);
}
    </style>
    <template>
        <div id="article-container" class="layout horizontal">
            <div class="article previous-article" hidden id="article-0"></div>
            <div class="article active-article height-provider" id="article-1"></div>
            <div class="article next-article" hidden id="article-2"></div>
            <content></content>
        </div>
    </template>

    <script>
(function() {
    "use strict";

    var animations = {};

    function ordinal(value) {
        var str = value.toString(), suff = str.slice(-1), ord = '';

        switch (suff) {
            case '1':
                ord = str.slice(-2) == '11' ? 'th' : 'st';
                break;
            case '2':
                ord = str.slice(-2) == '12' ? 'th' : 'nd';
                break;
            case '3':
                ord = str.slice(-2) == '13' ? 'th' : 'rd';
                break;
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '0':
                ord = 'th';
                break;
        }
        return value + ord;
    }

    function slideFromTop(element) {
        animations[element.id] = element.animate([
            {opacity: 0.5, transform: "translate3d(0px, -105%, 0px)"},
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)'});
    }

    function slideFromLeft(left, active, cb) {
        left.removeAttribute('hidden');

        animations[left.id] = left.animate([
            {opacity: 0.3, transform: "translate3d(-105%, 0px, 0px)"},
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)'});

        animations[active.id] = active.animate([
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
            {opacity: 0.3, transform: "translate3d(105%, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)'});

        animations[active.id].onfinish = cb;
    }

    function slideFromRight(active, right, cb) {
        right.removeAttribute('hidden');

        animations[right.id] = right.animate([
            {opacity: 0.3, transform: "translate3d(105%, 0px, 0px)"},
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)'});

        animations[active.id] = active.animate([
            {opacity: 1, transform: "translate3d(0px, 0px, 0px)"},
            {opacity: 0.3, transform: "translate3d(-105%, 0px, 0px)"},
        ], {duration: 400, easing: 'cubic-bezier(0.4, 0, 0.2, 1)'});

        animations[active.id].onfinish = cb;
    }

    function stopRunningAnimations(finish) {
        var hadRunning = false;

        if (finish) {
            var emitter = null;
            for (var key in animations) {
                if (animations[key].playState == 'running') {
                    var oldHandler = animations[key].onfinish;
                    if (oldHandler) {
                        animations[key].onfinish = function() {
                            oldHandler.apply(this, arguments);
                            finish.apply(this, arguments);
                        };
                        emitter = null;
                        break;
                    } else {
                        emitter = animations[key];
                    }
                }
            }

            if (emitter) {
                emitter.onfinish = finish;
            }
        }

        for (var key in animations) {
            if (animations[key].playState == 'running') {
                hadRunning = true;
                animations[key].finish();
            } else if (animations[key].playState != 'finished') {
                animations[key].cancel();
            }
            delete animations[key];
        }

        return hadRunning;
    }

    Polymer({
        is: "rf-article",
        behaviors: [
            Polymer.Templatizer
        ],
        properties: {
            user: Object,
            narrow: {
                type: Boolean,
                reflectToAttribute: true,
            },

            _article: Object,
            _previous: Object,
            _next: Object,
            _articleIndex: Number,
        },

        created: function() {
            this._instances = new Array(3);
        },

        ready: function() {
            if (!this.ctor) {
                var template = Polymer.dom(this).querySelector('template');
                this.templatize(template);
            }
        },

        setArticles: function(article, previous, next, index) {
            var args = arguments;
            if (stopRunningAnimations(function() {
                this.setArticles.apply(this, args);
            }.bind(this))) {
                return;
            }

            if (article.Id == this._article && this._article.Id) {
                return;
            }

            var direction = 0;
            if (this._previous && article.Id == this._previous.Id) {
                direction = -1
            } else if (this._next && article.Id == this._next.Id) {
                direction = 1;
            }

            this._previous = previous;
            this._next = next;
            this._article = article;
            this._articleIndex = index;

            if (direction === 0) {
                this._debounceTemplate(this._render);
                this.debounce('animation', function() {
                    slideFromTop(this.querySelector('.active-article'));
                }.bind(this));
            } else {
                if (direction === 1) {
                    slideFromRight(this.querySelector('.active-article'), this.querySelector('.next-article'), function() {
                        this._render(direction);
                    }.bind(this));
                } else {
                    slideFromLeft(this.querySelector('.previous-article'), this.querySelector('.active-article'), function() {
                        this._render(direction);
                    }.bind(this));
                }
            }
        },

        _render: function(direction) {
            var active = this.querySelector('.active-article'),
                previous = this.querySelector('.previous-article'),
                next = this.querySelector('.next-article');
            if (direction === 1) {
                active.classList.remove('active-article');
                active.classList.add('previous-article');

                next.classList.remove('next-article');
                next.classList.add('active-article');

                previous.classList.remove('previous-article');
                previous.classList.add('next-article');

                this._instances[0] = this._instances[1];
                this._instances[1] = this._instances[2];
                this._instances[2] = null;
            } else if (direction === -1) {
                active.classList.remove('active-article');
                active.classList.add('next-article');

                previous.classList.remove('previous-article');
                previous.classList.add('active-article');

                next.classList.remove('next-article');
                next.classList.add('previous-article');

                this._instances[2] = this._instances[1];
                this._instances[1] = this._instances[0];
                this._instances[0] = null;
            }

            if (direction !== 1) {
                if (this._previous) {
                    var el = this.querySelector('.previous-article');
                    el.innerHTML = '';

                    var inst = this._generateArticle(this._previous, -1);
                    this._instances[0] = inst;
                    Polymer.dom(el).appendChild(inst.root);
                } else {
                    this._instances[0] = null;
                }
            }

            if (direction !== -1) {
                if (this._next) {
                    var el = this.querySelector('.next-article');
                    el.innerHTML = '';

                    var inst = this._generateArticle(this._next, 1);
                    this._instances[2] = inst;
                    Polymer.dom(el).appendChild(inst.root);
                } else {
                    this._instances[2] = null;
                }
            }

            if (direction !== 1 && direction !== -1) {
                var el = this.querySelector('.active-article');
                el.innerHTML = '';

                var inst = this._generateArticle(this._article, 0);
                this._instances[1] = inst;
                Polymer.dom(el).appendChild(inst.root);
            }

            var oldHeight = window.getComputedStyle(this.$['article-container']).getPropertyValue('height');

            ['previous-article', 'active-article', 'next-article'].forEach(function(cls) {
                var el = this.querySelector('.' + cls);
                el.removeAttribute('style');
                if (cls == 'active-article') {
                    el.classList.add('height-provider');
                    el.removeAttribute('hidden');
                } else {
                    el.classList.remove('height-provider');
                    el.setAttribute('hidden', '');
                }
            }.bind(this));

            var newHeight = window.getComputedStyle(this.$['article-container']).getPropertyValue('height');
            if (oldHeight != newHeight) {
                this.$['article-container'].animate([
                    {height: oldHeight},
                    {height: newHeight},
                ], {duration: 400, easing: 'ease'});
            }

            Polymer.dom.flush();
        },

        _generateArticle: function(article, direction) {
            var index = this._articleIndex + direction;
            var model = {
                article: article,
                summarized: false,
                topImage: null,
                keyPoints: [],
                index: index,
                ordinalPosition: ordinal(index + 1),
            }

            var inst = this.stamp(null);
            inst.item = model;

            this._stylizeArticleDescription(inst, model);

            return inst;
        },

        _stylizeArticleDescription: function(inst, model) {
            if (model.summarized) {
                return;
            }

            var description = inst.root.querySelector('.article-description'),
                imageStyler = function() {
                    if (image.width < 300) {
                        (image.parentNode || description).classList.add('clearfix');
                        image.style.float = "right";
                    }
                }, image;

            description.innerHTML = model.formatted ? model.formattedDescription : model.article.Description;
            image = description.querySelector('img');

            if (image) {
                if (image.complete) {
                    imageStyler();
                } else {
                    image.addEventListener('load', imageStyler);
                }
            }

            Array.prototype.forEach.call(
                description.querySelectorAll('img'),
                function(element) {
                    element.style.width = 'auto';
                    element.style.height = 'auto';
                }
            );

            Polymer.dom.flush();
        },

        _forwardParentProp: function(prop, value) {
            this._instances.forEach(function(inst) {
                if (inst) {
                    inst._templateInstance[prop] = value;
                }
            }.bind(this));
        },

        _forwardParentPath: function(path, value) {
            this._titleInstances.forEach(function(inst) {
                if (inst) {
                    inst._templateInstance.notifyPath(path, value, true);
                }
            }, this);
        },

    })
})()
    </script>
</dom-module>
{% end %}
