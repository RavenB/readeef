{% define "content" %}
<link rel="import" href="/dist/polymer/polymer.html">
<link rel="import" href="/dist/core-ajax/core-ajax.html">

<polymer-element name="rf-api" attributes="user pathAction version url params" constructor="RfAPI" hidden>
    <template>
        <content></content>
        <core-ajax id="request" url="{% .apiPattern %}v{{version}}/{{pathAction}}" handleAs="json" params="{{params}}" on-core-response="{{ onRequestResponse }}" on-core-complete="{{ onRequestComplete }}" on-core-error="{{ onRequestError }}"></core-ajax>
        <core-ajax id="nonce" url="{% .apiPattern %}v{{version}}/nonce" handleAs="json"></core-ajax>
    </template>
    <script src="/dist/cryptojs/rollups/md5.js"></script>
    <script src="/dist/cryptojs/rollups/hmac-sha256.js"></script>
    <script src="/dist/cryptojs/components/enc-base64-min.js"></script>
    <script>
(function() {
    Polymer('rf-api', {
        version: 1,
        pathAction: '',

        ready: function() {
            this.$.request.xhr.toQueryString = function(params) {
                var r = [];
                for (var n in params) {
                    var v = params[n];
                    n = encodeURIComponent(n);
                    if (Array.isArray(v)) {
                        v.forEach(function(val) {
                            r.push(val == null ? n : (n + '=' + encodeURIComponent(val)));
                        });
                    } else {
                        r.push(v == null ? n : (n + '=' + encodeURIComponent(v)));
                    }
                }
                return r.join('&');
            };
        },

        go: function() {
            if (!this.user) {
                return;
            }

            var self = this;

            this.$.nonce.processResponse = function(xhr) {
                var response = this.evalResponse(xhr);
                this.response = response;

                var xhr = self.$.request.xhr;

                if (!self.url) {
                    self.url = "{% .apiPattern %}v" + self.version + "/" + self.pathAction
                }

                self.$.request.url = self.url;
                self.$.request.xhr = {
                    request: function(args) {
                        var bodyHash = CryptoJS.MD5(args.body).toString(CryptoJS.enc.Base64),
                            message = encodeURI(args.url) + "\n" + (args.method || 'GET') + "\n",
                            messageHash;

                        args.headers['X-Date'] = new Date().toUTCString();
                        args.headers['X-Nonce'] = response.Nonce;

                        message += bodyHash + "\n" + args.headers['Content-Type'] + "\n"
                                + args.headers['X-Date'] + "\n" + args.headers['X-Nonce'] + "\n";

                        messageHash = CryptoJS.HmacSHA256(message, self.user.md5api).toString(CryptoJS.enc.Base64);

                        args.headers['Authorization'] = "Readeef " + self.user.login + ":" + messageHash;

                        xhr.request(args);
                    }
                };
                self.$.request.go();
                self.$.request.xhr = xhr;
            }

            return this.$.nonce.go();
        },

        onRequestResponse: function(event, detail) {
            this.fire('rf-api-response', detail);
        },

        onRequestError: function(event, detail) {
            this.fire('rf-api-error', detail);
        },

        onRequestComplete: function(event, detail) {
            this.fire('rf-api-complete', detail);
        }
    });
})();
    </script>
</polymer-element>
{% end %}
